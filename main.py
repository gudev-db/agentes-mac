import streamlit as st
import io
import google.generativeai as genai
from PIL import Image
import requests
import datetime
import os
from pymongo import MongoClient
from bson import ObjectId
import json
import hashlib
from google.genai import types
import PyPDF2
from pptx import Presentation
import docx

# Configura√ß√£o inicial
st.set_page_config(
    layout="wide",
    page_title="Agente Social",
    page_icon="ü§ñ"
)

# --- Sistema de Autentica√ß√£o ---
def make_hashes(password):
    return hashlib.sha256(str.encode(password)).hexdigest()

def check_hashes(password, hashed_text):
    return make_hashes(password) == hashed_text

# Dados de usu√°rio (em produ√ß√£o, isso deve vir de um banco de dados seguro)
users = {
    "admin": make_hashes("senha1234"),  # admin/senha1234
    "user1": make_hashes("password1"),  # user1/password1
    "user2": make_hashes("password2")   # user2/password2
}

def login():
    """Formul√°rio de login"""
    st.title("üîí Agente Social - Login")
    
    with st.form("login_form"):
        username = st.text_input("Usu√°rio")
        password = st.text_input("Senha", type="password")
        submit_button = st.form_submit_button("Login")
        
        if submit_button:
            if username in users and check_hashes(password, users[username]):
                st.session_state.logged_in = True
                st.session_state.user = username
                st.success("Login realizado com sucesso!")
                st.rerun()
            else:
                st.error("Usu√°rio ou senha incorretos")

# Verificar se o usu√°rio est√° logado
if "logged_in" not in st.session_state:
    st.session_state.logged_in = False

if not st.session_state.logged_in:
    login()
    st.stop()

# --- CONEX√ÉO MONGODB (ap√≥s login) ---
client = MongoClient("mongodb+srv://gustavoromao3345:RqWFPNOJQfInAW1N@cluster0.5iilj.mongodb.net/auto_doc?retryWrites=true&w=majority&ssl=true&ssl_cert_reqs=CERT_NONE&tlsAllowInvalidCertificates=true")
db = client['agentes_personalizados']
collection_agentes = db['agentes']
collection_conversas = db['conversas']

# Configura√ß√£o da API do Gemini
gemini_api_key = os.getenv("GEM_API_KEY")
if not gemini_api_key:
    st.error("GEMINI_API_KEY n√£o encontrada nas vari√°veis de ambiente")
    st.stop()

genai.configure(api_key=gemini_api_key)
modelo_vision = genai.GenerativeModel("gemini-2.5-flash", generation_config={"temperature": 0.1})
modelo_texto = genai.GenerativeModel("gemini-2.5-flash")

# Configura√ß√£o da API do Perplexity
perp_api_key = os.getenv("PERP_API_KEY")
if not perp_api_key:
    st.error("PERP_API_KEY n√£o encontrada nas vari√°veis de ambiente")

# --- Configura√ß√£o de Autentica√ß√£o de Administrador ---
def check_admin_password():
    """Retorna True para usu√°rios admin sem verifica√ß√£o de senha."""
    return st.session_state.user == "admin"

# --- Fun√ß√µes CRUD para Agentes ---
def criar_agente(nome, system_prompt, base_conhecimento, comments, planejamento, categoria, agente_mae_id=None, herdar_elementos=None):
    """Cria um novo agente no MongoDB"""
    agente = {
        "nome": nome,
        "system_prompt": system_prompt,
        "base_conhecimento": base_conhecimento,
        "comments": comments,
        "planejamento": planejamento,
        "categoria": categoria,
        "agente_mae_id": agente_mae_id,
        "herdar_elementos": herdar_elementos or [],
        "data_criacao": datetime.datetime.now(),
        "ativo": True
    }
    result = collection_agentes.insert_one(agente)
    return result.inserted_id

def listar_agentes():
    """Retorna todos os agentes ativos"""
    return list(collection_agentes.find({"ativo": True}).sort("data_criacao", -1))

def listar_agentes_para_heranca(agente_atual_id=None):
    """Retorna todos os agentes ativos que podem ser usados como m√£e"""
    query = {"ativo": True}
    if agente_atual_id:
        # Excluir o pr√≥prio agente da lista de op√ß√µes para evitar auto-heran√ßa
        if isinstance(agente_atual_id, str):
            agente_atual_id = ObjectId(agente_atual_id)
        query["_id"] = {"$ne": agente_atual_id}
    return list(collection_agentes.find(query).sort("data_criacao", -1))

def obter_agente(agente_id):
    """Obt√©m um agente espec√≠fico pelo ID"""
    if isinstance(agente_id, str):
        agente_id = ObjectId(agente_id)
    return collection_agentes.find_one({"_id": agente_id})

def atualizar_agente(agente_id, nome, system_prompt, base_conhecimento, comments, planejamento, categoria, agente_mae_id=None, herdar_elementos=None):
    """Atualiza um agente existente"""
    if isinstance(agente_id, str):
        agente_id = ObjectId(agente_id)
    return collection_agentes.update_one(
        {"_id": agente_id},
        {
            "$set": {
                "nome": nome,
                "system_prompt": system_prompt,
                "base_conhecimento": base_conhecimento,
                "comments": comments,
                "planejamento": planejamento,
                "categoria": categoria,
                "agente_mae_id": agente_mae_id,
                "herdar_elementos": herdar_elementos or [],
                "data_atualizacao": datetime.datetime.now()
            }
        }
    )

def desativar_agente(agente_id):
    """Desativa um agente (soft delete)"""
    if isinstance(agente_id, str):
        agente_id = ObjectId(agente_id)
    return collection_agentes.update_one(
        {"_id": agente_id},
        {"$set": {"ativo": False, "data_desativacao": datetime.datetime.now()}}
    )

def obter_agente_com_heranca(agente_id):
    """Obt√©m um agente com os elementos herdados aplicados"""
    agente = obter_agente(agente_id)
    if not agente or not agente.get('agente_mae_id'):
        return agente
    
    agente_mae = obter_agente(agente['agente_mae_id'])
    if not agente_mae:
        return agente
    
    elementos_herdar = agente.get('herdar_elementos', [])
    agente_completo = agente.copy()
    
    for elemento in elementos_herdar:
        if elemento == 'system_prompt' and not agente_completo.get('system_prompt'):
            agente_completo['system_prompt'] = agente_mae.get('system_prompt', '')
        elif elemento == 'base_conhecimento' and not agente_completo.get('base_conhecimento'):
            agente_completo['base_conhecimento'] = agente_mae.get('base_conhecimento', '')
        elif elemento == 'comments' and not agente_completo.get('comments'):
            agente_completo['comments'] = agente_mae.get('comments', '')
        elif elemento == 'planejamento' and not agente_completo.get('planejamento'):
            agente_completo['planejamento'] = agente_mae.get('planejamento', '')
    
    return agente_completo

def salvar_conversa(agente_id, mensagens, segmentos_utilizados=None):
    """Salva uma conversa no hist√≥rico"""
    if isinstance(agente_id, str):
        agente_id = ObjectId(agente_id)
    conversa = {
        "agente_id": agente_id,
        "mensagens": mensagens,
        "segmentos_utilizados": segmentos_utilizados,
        "data_criacao": datetime.datetime.now()
    }
    return collection_conversas.insert_one(conversa)

def obter_conversas(agente_id, limite=10):
    """Obt√©m o hist√≥rico de conversas de um agente"""
    if isinstance(agente_id, str):
        agente_id = ObjectId(agente_id)
    return list(collection_conversas.find(
        {"agente_id": agente_id}
    ).sort("data_criacao", -1).limit(limite))

# --- Fun√ß√£o para construir contexto com segmentos selecionados ---
def construir_contexto(agente, segmentos_selecionados, historico_mensagens=None):
    """Constr√≥i o contexto com base nos segmentos selecionados"""
    contexto = ""
    
    if "system_prompt" in segmentos_selecionados and agente.get('system_prompt'):
        contexto += f"### INSTRU√á√ïES DO SISTEMA ###\n{agente['system_prompt']}\n\n"
    
    if "base_conhecimento" in segmentos_selecionados and agente.get('base_conhecimento'):
        contexto += f"### BASE DE CONHECIMENTO ###\n{agente['base_conhecimento']}\n\n"
    
    if "comments" in segmentos_selecionados and agente.get('comments'):
        contexto += f"### COMENT√ÅRIOS DO CLIENTE ###\n{agente['comments']}\n\n"
    
    if "planejamento" in segmentos_selecionados and agente.get('planejamento'):
        contexto += f"### PLANEJAMENTO ###\n{agente['planejamento']}\n\n"
    
    # Adicionar hist√≥rico se fornecido
    if historico_mensagens:
        contexto += "### HIST√ìRICO DA CONVERSA ###\n"
        for msg in historico_mensagens:
            contexto += f"{msg['role']}: {msg['content']}\n"
        contexto += "\n"
    
    contexto += "### RESPOSTA ATUAL ###\nassistant:"
    
    return contexto

# --- Fun√ß√µes para processamento de v√≠deo ---
def processar_video_upload(video_file, segmentos_selecionados, agente, tipo_analise="completa"):
    """Processa v√≠deo upload e retorna an√°lise"""
    try:
        # Ler bytes do v√≠deo
        video_bytes = video_file.read()
        
        # Construir contexto com segmentos selecionados
        contexto = construir_contexto(agente, segmentos_selecionados)
        
        # Definir prompt baseado no tipo de an√°lise
        if tipo_analise == "completa":
            prompt = f"""
            {contexto}
            
            Analise este v√≠deo considerando as diretrizes fornecidas e forne√ßa um relat√≥rio detalhado:
            
            ## üé¨ AN√ÅLISE DO V√çDEO
            
            ### üìä Resumo Executivo
            [Forne√ßa uma vis√£o geral da conformidade do v√≠deo com as diretrizes]
            
            ### ‚úÖ Pontos de Conformidade
            - [Liste os aspectos que est√£o em conformidade]
            
            ### ‚ö†Ô∏è Pontos de Aten√ß√£o
            - [Liste os aspectos que precisam de ajustes]
            
            ### üéØ An√°lise de Conte√∫do
            - **Mensagem**: [Avalie se a mensagem est√° alinhada]
            - **Tom e Linguagem**: [Avalie o tom utilizado]
            - **Valores da Marca**: [Verifique alinhamento com valores]
            
            ### üé® An√°lise Visual
            - **Identidade Visual**: [Cores, logos, tipografia]
            - **Qualidade T√©cnica**: [Ilumina√ß√£o, enquadramento, √°udio]
            - **Consist√™ncia**: [Manuten√ß√£o da identidade ao longo do v√≠deo]
            
            ### üîä An√°lise de √Åudio
            - [Qualidade, trilha sonora, voz]
            
            ### üìã Recomenda√ß√µes Espec√≠ficas
            [Liste recomenda√ß√µes pr√°ticas para melhorias]
            
            ### üèÜ Avalia√ß√£o Final
            [Aprovado/Reprovado/Com ajustes] - [Justificativa]
            
            ### üî§ AN√ÅLISE DE TEXTO EM V√çDEO
            - **Textos Vis√≠veis**: Analise todos os textos que aparecem no v√≠deo (legendas, t√≠tulos, gr√°ficos, etc.)
            - **Conformidade Textual**: Verifique se os textos seguem as diretrizes da base de conhecimento
            - **Erros Ortogr√°ficos**: Identifique poss√≠veis erros em textos inseridos
            - **Consist√™ncia de Mensagem**: Avalie se o texto visual refor√ßa a mensagem principal
            """
        elif tipo_analise == "rapida":
            prompt = f"""
            {contexto}
            
            Fa√ßa uma an√°lise r√°pida deste v√≠deo focando nos aspectos mais cr√≠ticos:
            
            ### üîç An√°lise R√°pida
            - **Conformidade Geral**: [Avalia√ß√£o geral]
            - **Principais Pontos Positivos**: [2-3 pontos]
            - **Principais Problemas**: [2-3 pontos cr√≠ticos]
            - **Recomenda√ß√£o Imediata**: [Aprovar/Reprovar/Ajustar]
            - **Textos em V√≠deo**: [An√°lise r√°pida de textos vis√≠veis e conformidade]
            """
        else:  # an√°lise t√©cnica
            prompt = f"""
            {contexto}
            
            Fa√ßa uma an√°lise t√©cnica detalhada do v√≠deo:
            
            ### üõ†Ô∏è An√°lise T√©cnica
            - **Qualidade de V√≠deo**: [Resolu√ß√£o, estabilidade, compression]
            - **Qualidade de √Åudio**: [Clareza, ru√≠do, mixagem]
            - **Edi√ß√£o e Transi√ß√µes**: [Fluidez, ritmo, cortes]
            - **Aspectos T√©cnicos Conformes**: 
            - **Problemas T√©cnicos Identificados**:
            - **Recomenda√ß√µes T√©cnicas**:
            - **Textos e Legibilidade**: [Qualidade de textos inseridos, legibilidade, conformidade]
            """
        
        # Processar v√≠deo com a API Gemini
        response = modelo_vision.generate_content(
            contents=[
                types.Part(
                    inline_data=types.Blob(
                        data=video_bytes,
                        mime_type=video_file.type
                    )
                ),
                types.Part(text=prompt)
            ]
        )
        
        return response.text
        
    except Exception as e:
        return f"Erro ao processar v√≠deo: {str(e)}"

def processar_url_youtube(youtube_url, segmentos_selecionados, agente, tipo_analise="completa"):
    """Processa URL do YouTube e retorna an√°lise"""
    try:
        # Construir contexto com segmentos selelecionados
        contexto = construir_contexto(agente, segmentos_selecionados)
        
        # Definir prompt baseado no tipo de an√°lise
        if tipo_analise == "completa":
            prompt = f"""
            {contexto}
            
            Analise este v√≠deo do YouTube considerando as diretrizes fornecidas:
            
            ## üé¨ AN√ÅLISE DO V√çDEO - YOUTUBE
            
            ### üìä Resumo Executivo
            [Avalia√ß√£o geral de conformidade]
            
            ### üéØ Conte√∫do e Mensagem
            - Alinhamento com diretrizes: 
            - Clareza da mensagem:
            - Tom e abordagem:
            
            ### üé® Aspectos Visuais
            - Identidade visual:
            - Qualidade de produ√ß√£o:
            - Consist√™ncia da marca:
            
            ### üîä Aspectos de √Åudio
            - Qualidade do √°udio:
            - Trilha sonora:
            - Narra√ß√£o/di√°logo:
            
            ### üìà Estrutura e Engajamento
            - Ritmo do v√≠deo:
            - Manuten√ß√£o do interesse:
            - Chamadas para a√ß√£o:
            
            ### ‚úÖ Pontos Fortes
            - [Liste os pontos positivos]
            
            ### ‚ö†Ô∏è Pontos de Melhoria
            - [Liste sugest√µes de melhoria]
            
            ### üî§ An√°lise de Textos no V√≠deo
            - **Textos Vis√≠veis**: Analise legendas, t√≠tulos, descri√ß√µes na tela
            - **Conformidade Textual**: Verifique alinhamento com base de conhecimento
            - **Qualidade dos Textos**: Avalie clareza, ortografia, adequa√ß√£o
            - **Consist√™ncia**: Verifique se textos refor√ßam mensagem principal
            
            ### üèÜ Recomenda√ß√£o Final
            [Status e justificativa]
            """
        
        # Processar URL do YouTube
        response = modelo_vision.generate_content(
            contents=[
                types.Part(
                    file_data=types.FileData(file_uri=youtube_url)
                ),
                types.Part(text=prompt)
            ]
        )
        
        return response.text
        
    except Exception as e:
        return f"Erro ao processar URL do YouTube: {str(e)}"

# --- Fun√ß√µes para busca web com Perplexity ---
def buscar_perplexity(pergunta, contexto_agente=None, focus=None, urls_especificas=None):
    """Faz busca na web usando a API do Perplexity"""
    try:
        if not perp_api_key:
            return "‚ùå Erro: Chave da API Perplexity n√£o configurada"
        
        # Construir o prompt com contexto do agente se fornecido
        prompt_final = pergunta
        if contexto_agente:
            prompt_final = f"""
            Contexto do agente:
            {contexto_agente}
            
            Pergunta: {pergunta}
            
            Por favor, responda considerando o contexto acima e complemente com informa√ß√µes atualizadas da web.
            """
        
        # Configurar os par√¢metros da requisi√ß√£o
        url = "https://api.perplexity.ai/chat/completions"
        
        headers = {
            "Authorization": perp_api_key,
            "Content-Type": "application/json"
        }
        
        # Configurar o payload
        payload = {
            "model": "sonar",
            "messages": [
                {
                    "role": "system",
                    "content": "Seja preciso e forne√ßa informa√ß√µes atualizadas. Cite fontes quando relevante."
                },
                {
                    "role": "user",
                    "content": prompt_final
                }
            ],
            "max_tokens": 2000,
            "temperature": 0.1,
            "top_p": 0.9,
            "return_citations": True,
            "search_domain_filters": urls_especificas if urls_especificas else None
        }
        
        # Fazer a requisi√ß√£o
        response = requests.post(url, json=payload, headers=headers, timeout=30)
        
        if response.status_code == 200:
            data = response.json()
            resposta = data['choices'][0]['message']['content']
            
            # Adicionar cita√ß√µes se dispon√≠veis
            if 'citations' in data and data['citations']:
                resposta += "\n\n### üîç Fontes Consultadas:\n"
                for i, citation in enumerate(data['citations'], 1):
                    resposta += f"{i}. {citation}\n"
            
            return resposta
        else:
            return f"‚ùå Erro na API Perplexity: {response.status_code} - {response.text}"
            
    except Exception as e:
        return f"‚ùå Erro ao fazer busca: {str(e)}"

def analisar_urls_perplexity(urls, pergunta, contexto_agente=None):
    """Analisa URLs espec√≠ficas usando Perplexity"""
    try:
        if not perp_api_key:
            return "‚ùå Erro: Chave da API Perplexity n√£o configurada"
        
        # Construir prompt para an√°lise de URLs
        prompt = f"""
        Analise as seguintes URLs e responda √† pergunta com base no conte√∫do delas:
        
        URLs para an√°lise:
        {chr(10).join([f'- {url}' for url in urls])}
        
        Pergunta: {pergunta}
        """
        
        if contexto_agente:
            prompt = f"""
            Contexto do agente:
            {contexto_agente}
            
            {prompt}
            
            Por favor, responda considerando o contexto do agente e as informa√ß√µes das URLs fornecidas.
            """
        
        url = "https://api.perplexity.ai/chat/completions"
        
        headers = {
            "Authorization": perp_api_key,
            "Content-Type": "application/json"
        }
        
        payload = {
            "model": "sonar",
            "messages": [
                {
                    "role": "system",
                    "content": "Analise o conte√∫do das URLs fornecidas e responda com base nelas. Cite trechos espec√≠ficos quando relevante."
                },
                {
                    "role": "user",
                    "content": prompt
                }
            ],
            "max_tokens": 2000,
            "temperature": 0.1,
            "top_p": 0.9,
            "return_citations": True,
            "search_domain_filters": urls
        }
        
        response = requests.post(url, json=payload, headers=headers, timeout=30)
        
        if response.status_code == 200:
            data = response.json()
            resposta = data['choices'][0]['message']['content']
            
            if 'citations' in data and data['citations']:
                resposta += "\n\n### üîç URLs Analisadas:\n"
                for i, citation in enumerate(data['citations'], 1):
                    resposta += f"{i}. {citation}\n"
            
            return resposta
        else:
            return f"‚ùå Erro na API Perplexity: {response.status_code} - {response.text}"
            
    except Exception as e:
        return f"‚ùå Erro ao analisar URLs: {str(e)}"

# --- Fun√ß√£o para Otimiza√ß√£o SEO ---
def gerar_analise_seo(conteudo, agente, palavra_chave_principal=None, tipo_conteudo="blog"):
    """Gera an√°lise completa de SEO para o conte√∫do fornecido"""
    
    # Construir contexto com segmentos do agente
    contexto = construir_contexto(agente, ["system_prompt", "base_conhecimento", "planejamento"])
    
    # Definir prompt espec√≠fico para SEO
    prompt = f"""
    {contexto}
    
    ## üéØ AN√ÅLISE DE OTIMIZA√á√ÉO SEO
    
    Analise o seguinte conte√∫do para otimiza√ß√£o SEO e forne√ßa um relat√≥rio detalhado:
    
    **Informa√ß√µes do Conte√∫do:**
    - Tipo: {tipo_conteudo}
    {f"- Palavra-chave Principal: {palavra_chave_principal}" if palavra_chave_principal else "- Palavra-chave: A ser identificada"}
    
    **Conte√∫do para An√°lise:**
    {conteudo}
    
    ### üìä RESUMO EXECUTIVO
    [Avalia√ß√£o geral do conte√∫do em termos de SEO]
    
    ### üîç AN√ÅLISE DE PALAVRAS-CHAVE
    **Palavras-chave Identificadas:**
    - Principal: [identificar/sugerir]
    - Secund√°rias: [listar 3-5]
    - LSI (Latent Semantic Indexing): [sugerir 3-5]
    
    **Densidade e Uso:**
    - Frequ√™ncia da palavra-chave principal: 
    - Distribui√ß√£o ao longo do texto:
    - Sugest√µes de otimiza√ß√£o:
    
    ### üìù AN√ÅLISE DE CONTE√öDO
    **Meta Informa√ß√µes:**
    - **T√≠tulo SEO** (atual/sugerido): 
      [Avaliar e sugerir t√≠tulo otimizado (50-60 caracteres)]
    
    - **Meta Description** (atual/sugerida):
      [Avaliar e sugerir descri√ß√£o otimizada (120-158 caracteres)]
    
    **Estrutura do Conte√∫do:**
    - T√≠tulos H1, H2, H3: [Avaliar hierarquia e uso de palavras-chave]
    - Comprimento do conte√∫do: [Avaliar se √© adequado para o t√≥pico]
    - Legibilidade: [Avaliar clareza e facilidade de leitura]
    - Valor para o usu√°rio: [Avaliar qualidade e profundidade]
    
    ### üîó OTIMIZA√á√ÉO ON-PAGE
    **Elementos T√©cnicos:**
    - URLs: [Sugerir estrutura otimizada]
    - Imagens: [Sugerir otimiza√ß√£o de alt text e nomes de arquivo]
    - Links Internos: [Sugerir oportunidades]
    - Links Externos: [Sugerir fontes autoritativas]
    
    **Engajamento:**
    - Chamadas para a√ß√£o (CTAs): [Avaliar e sugerir]
    - Elementos visuais: [Sugerir melhorias]
    - Interatividade: [Sugerir elementos engajadores]
    
    ### üìà OTIMIZA√á√ÉO OFF-PAGE
    **Estrat√©gias de Link Building:**
    - [Sugerir 3-5 estrat√©gias espec√≠ficas]
    
    **Compartilhamento Social:**
    - T√≠tulos para redes sociais: [Sugerir varia√ß√µes]
    - Descri√ß√µes otimizadas: [Para Facebook, Twitter, LinkedIn]
    
    ### üéØ SCORE SEO
    **Pontua√ß√£o por Categoria:**
    - Palavras-chave: [0-10]
    - Conte√∫do: [0-10] 
    - T√©cnico: [0-10]
    - Experi√™ncia do Usu√°rio: [0-10]
    
    **Pontua√ß√£o Total:** [0-40]
    
    ### üöÄ A√á√ïES RECOMENDADAS
    **Prioridade Alta:**
    - [Listar 3-5 a√ß√µes cr√≠ticas]
    
    **Prioridade M√©dia:**
    - [Listar 3-5 a√ß√µes importantes]
    
    **Prioridade Baixa:**
    - [Listar 2-3 otimiza√ß√µes adicionais]
    
    ### üí° CONTE√öDO SUGERIDO
    **T√≥picos Relacionados:**
    - [Sugerir 3-5 t√≥picos para pillar content]
    
    **Perguntas Frequentes:**
    - [Listar 3-5 perguntas que o conte√∫do responde]
    
    ### üìã CHECKLIST DE OTIMIZA√á√ÉO
    - [ ] T√≠tulo otimizado com palavra-chave
    - [ ] Meta description atrativa
    - [ ] Estrutura de headings adequada
    - [ ] Conte√∫do de valor e profundidade
    - [ ] Palavras-chave bem distribu√≠das
    - [ ] Imagens otimizadas
    - [ ] Links internos relevantes
    - [ ] CTAs eficazes
    - [ ] Conte√∫do mobile-friendly
    - [ ] Velocidade de carregamento adequada
    """
    
    try:
        pre_resposta = modelo_texto.generate_content(prompt)
        resposta = modelo_texto.generate_content(f'''Com base no, utilize como refer√™ncia a an√°lise de otimiza√ß√£o de SEO e gere o conte√∫do otimizado por INTEIRO
            ###BEGIN CONTEUDO ORIGINAL A SER AJUSTADO###
            {conteudo}
            ###END CONTEUDO ORIGINAL A SER AJUSTADO###
            
            ###BEGIN ANALISE DE PONTOS DE MELHORIA###
            {pre_resposta}
            ###END ANALISE DE PONTOS DE MELHORIA###

            
            ''')
        
        return resposta.text
    except Exception as e:
        return f"‚ùå Erro ao gerar an√°lise SEO: {str(e)}"

# --- Fun√ß√£o para Revis√£o Ortogr√°fica ---
def revisar_texto_ortografia(texto, agente, segmentos_selecionados):
    """Faz revis√£o ortogr√°fica e gramatical considerando as bases do agente"""
    
    # Construir contexto com segmentos selecionados
    contexto = construir_contexto(agente, segmentos_selecionados)
    
    prompt = f"""
    {contexto}
    
    ## üìù REVIS√ÉO ORTOGR√ÅFICA E GRAMATICAL
    
    Fa√ßa uma revis√£o completa do texto abaixo, considerando as diretrizes fornecidas:
    
    ### TEXTO ORIGINAL:
    {texto}
    
    ### FORMATO DA RESPOSTA:
    
    ## üìä RESUMO DA REVIS√ÉO
    [Resumo geral dos problemas encontrados e qualidade do texto]
    
    ## ‚úÖ PONTOS FORTES
    - [Listar aspectos positivos do texto]
    
    ## ‚ö†Ô∏è PROBLEMAS IDENTIFICADOS
    
    ### üî§ Ortografia
    - [Listar erros ortogr√°ficos encontrados]
    
    ### üìñ Gram√°tica
    - [Listar erros gramaticais]
    
    ### üî† Pontua√ß√£o
    - [Listar problemas de pontua√ß√£o]
    
    ### üìù Estilo e Clareza
    - [Sugest√µes para melhorar clareza e estilo]
    
    ### üéØ Adequa√ß√£o √†s Diretrizes
    - [Avalia√ß√£o de conformidade com as diretrizes fornecidas]
    
    ## üìã TEXTO REVISADO
    [Apresentar o texto completo com as corre√ß√µes aplicadas]
    
    ## üîç EXPLICA√á√ÉO DAS PRINCIPAIS ALTERA√á√ïES
    [Explicar as mudan√ßas mais importantes realizadas]
    
    ## üìà SCORE DE QUALIDADE
    **Ortografia:** [0-10]
    **Gram√°tica:** [0-10]
    **Clareza:** [0-10]
    **Conformidade:** [0-10]
    **Total:** [0-40]
    """
    
    try:
        resposta = modelo_texto.generate_content(prompt)
        return resposta.text
    except Exception as e:
        return f"‚ùå Erro ao realizar revis√£o: {str(e)}"

# --- Fun√ß√£o para processar imagem com an√°lise de texto ---
def processar_imagem_upload(imagem_file, segmentos_selecionados, agente):
    """Processa imagem upload e retorna an√°lise detalhada incluindo textos na imagem"""
    try:
        # Abrir e processar imagem
        image = Image.open(imagem_file)
        
        # Construir contexto com segmentos selecionados
        contexto = construir_contexto(agente, segmentos_selecionados)
        
        prompt = f"""
        {contexto}
        
        Analise esta imagem considerando as diretrizes fornecidas e forne√ßa um relat√≥rio detalhado:
        
        ## üñºÔ∏è AN√ÅLISE DA IMAGEM
        
        ### üìä Resumo Executivo
        [Avalia√ß√£o geral da conformidade da imagem com as diretrizes]
        
        ### üé® An√°lise Visual
        - **Identidade Visual**: [Cores, logos, tipografia, elementos de marca]
        - **Qualidade T√©cnica**: [Resolu√ß√£o, nitidez, composi√ß√£o]
        - **Consist√™ncia com Diretrizes**: [Ader√™ncia √†s especifica√ß√µes da marca]
        
        ### üî§ AN√ÅLISE DE TEXTOS NA IMAGEM
        **Textos Identificados:**
        - [Listar todos os textos vis√≠veis na imagem]
        
        **Conformidade Textual:**
        - [Verificar se os textos seguem as diretrizes da base de conhecimento]
        - [Identificar poss√≠veis erros ortogr√°ficos em textos inseridos]
        - [Avaliar adequa√ß√£o da linguagem e tom]
        - [Verificar consist√™ncia com mensagem da marca]
        
        **Recomenda√ß√µes para Textos:**
        - [Sugerir ajustes em textos quando necess√°rio]
        - [Otimizar mensagens textuais conforme diretrizes]
        
        ### ‚úÖ Pontos de Conformidade
        - [Liste os aspectos que est√£o em conformidade]
        
        ### ‚ö†Ô∏è Pontos de Aten√ß√£o
        - [Liste os aspectos que precisam de ajustes]
        
        ### üìã Recomenda√ß√µes Espec√≠ficas
        [Liste recomenda√ß√µes pr√°ticas para melhorias]
        
        ### üèÜ Avalia√ß√£o Final
        [Aprovado/Reprovado/Com ajustes] - [Justificativa]
        """
        
        # Processar imagem com a API Gemini
        response = modelo_vision.generate_content([
            prompt,
            {"mime_type": "image/jpeg", "data": imagem_file.getvalue()}
        ])
        
        return response.text
        
    except Exception as e:
        return f"Erro ao processar imagem: {str(e)}"

# --- Interface Principal ---
st.sidebar.title(f"ü§ñ Bem-vindo, {st.session_state.user}!")

# Bot√£o de logout na sidebar
if st.sidebar.button("üö™ Sair", key="logout_btn"):
    for key in ["logged_in", "user", "admin_password_correct", "admin_user"]:
        if key in st.session_state:
            del st.session_state[key]
    st.rerun()

st.title("Agente Social")

# Inicializar estado da sess√£o
if "agente_selecionado" not in st.session_state:
    st.session_state.agente_selecionado = None
if "messages" not in st.session_state:
    st.session_state.messages = []
if "segmentos_selecionados" not in st.session_state:
    st.session_state.segmentos_selecionados = ["system_prompt", "base_conhecimento", "comments", "planejamento"]

# Menu de abas - ABA UNIFICADA DE VALIDA√á√ÉO
tab_chat, tab_gerenciamento, tab_validacao, tab_geracao, tab_resumo, tab_busca, tab_revisao = st.tabs([
    "üí¨ Chat", 
    "‚öôÔ∏è Gerenciar Agentes", 
    "‚úÖ Valida√ß√£o Unificada",  # ABA UNIFICADA
    "‚ú® Gera√ß√£o de Conte√∫do",
    "üìù Resumo de Textos",
    "üåê Busca Web",
    "üìù Revis√£o Ortogr√°fica"
])

with tab_gerenciamento:
    st.header("Gerenciamento de Agentes")
    
    # Verificar autentica√ß√£o apenas para gerenciamento
    if st.session_state.user != "admin":
        st.warning("Acesso restrito a administradores")
    else:
        # Verificar senha de admin
        if not check_admin_password():
            st.warning("Digite a senha de administrador")
        else:
            # Mostra o bot√£o de logout admin
            if st.button("Logout Admin", key="admin_logout"):
                if "admin_password_correct" in st.session_state:
                    del st.session_state["admin_password_correct"]
                if "admin_user" in st.session_state:
                    del st.session_state["admin_user"]
                st.rerun()
            
            st.write(f'Bem-vindo administrador!')
            
            # Subabas para gerenciamento
            sub_tab1, sub_tab2, sub_tab3 = st.tabs(["Criar Agente", "Editar Agente", "Gerenciar Agentes"])
            
            with sub_tab1:
                st.subheader("Criar Novo Agente")
                
                with st.form("form_criar_agente"):
                    nome_agente = st.text_input("Nome do Agente:")
                    
                    # Sele√ß√£o de categoria
                    categoria = st.selectbox(
                        "Categoria:",
                        ["Social", "SEO", "Conte√∫do"],
                        help="Organize o agente por √°rea de atua√ß√£o"
                    )
                    
                    # Op√ß√£o para criar como agente filho
                    criar_como_filho = st.checkbox("Criar como agente filho (herdar elementos)")
                    
                    agente_mae_id = None
                    herdar_elementos = []
                    
                    if criar_como_filho:
                        # Listar TODOS os agentes dispon√≠veis para heran√ßa
                        agentes_mae = listar_agentes_para_heranca()
                        if agentes_mae:
                            agente_mae_options = {f"{agente['nome']} ({agente.get('categoria', 'Social')})": agente['_id'] for agente in agentes_mae}
                            agente_mae_selecionado = st.selectbox(
                                "Agente M√£e:",
                                list(agente_mae_options.keys()),
                                help="Selecione o agente do qual este agente ir√° herdar elementos"
                            )
                            agente_mae_id = agente_mae_options[agente_mae_selecionado]
                            
                            st.subheader("Elementos para Herdar")
                            herdar_elementos = st.multiselect(
                                "Selecione os elementos a herdar do agente m√£e:",
                                ["system_prompt", "base_conhecimento", "comments", "planejamento"],
                                help="Estes elementos ser√£o herdados do agente m√£e se n√£o preenchidos abaixo"
                            )
                        else:
                            st.info("Nenhum agente dispon√≠vel para heran√ßa. Crie primeiro um agente m√£e.")
                    
                    system_prompt = st.text_area("Prompt de Sistema:", height=150, 
                                                placeholder="Ex: Voc√™ √© um assistente especializado em...",
                                                help="Deixe vazio se for herdar do agente m√£e")
                    base_conhecimento = st.text_area("Brand Guidelines:", height=200,
                                                   placeholder="Cole aqui informa√ß√µes, diretrizes, dados...",
                                                   help="Deixe vazio se for herdar do agente m√£e")
                    comments = st.text_area("Coment√°rios do cliente:", height=200,
                                                   placeholder="Cole aqui os coment√°rios de ajuste do cliente (Se houver)",
                                                   help="Deixe vazio se for herdar do agente m√£e")
                    planejamento = st.text_area("Planejamento:", height=200,
                                               placeholder="Estrat√©gias, planejamentos, cronogramas...",
                                               help="Deixe vazio se for herdar do agente m√£e")
                    
                    submitted = st.form_submit_button("Criar Agente")
                    if submitted:
                        if nome_agente:
                            agente_id = criar_agente(
                                nome_agente, 
                                system_prompt, 
                                base_conhecimento, 
                                comments, 
                                planejamento,
                                categoria,
                                agente_mae_id if criar_como_filho else None,
                                herdar_elementos if criar_como_filho else []
                            )
                            st.success(f"Agente '{nome_agente}' criado com sucesso na categoria {categoria}!")
                        else:
                            st.error("Nome √© obrigat√≥rio!")
            
            with sub_tab2:
                st.subheader("Editar Agente Existente")
                
                agentes = listar_agentes()
                if agentes:
                    agente_options = {agente['nome']: agente for agente in agentes}
                    agente_selecionado_nome = st.selectbox("Selecione o agente para editar:", 
                                                         list(agente_options.keys()))
                    
                    if agente_selecionado_nome:
                        agente = agente_options[agente_selecionado_nome]
                        
                        with st.form("form_editar_agente"):
                            novo_nome = st.text_input("Nome do Agente:", value=agente['nome'])
                            
                            # Categoria
                            nova_categoria = st.selectbox(
                                "Categoria:",
                                ["Social", "SEO", "Conte√∫do"],
                                index=["Social", "SEO", "Conte√∫do"].index(agente.get('categoria', 'Social')),
                                help="Organize o agente por √°rea de atua√ß√£o"
                            )
                            
                            # Informa√ß√µes de heran√ßa
                            if agente.get('agente_mae_id'):
                                agente_mae = obter_agente(agente['agente_mae_id'])
                                if agente_mae:
                                    st.info(f"üîó Este agente √© filho de: {agente_mae['nome']}")
                                    st.write(f"Elementos herdados: {', '.join(agente.get('herdar_elementos', []))}")
                            
                            # Op√ß√£o para tornar independente
                            if agente.get('agente_mae_id'):
                                tornar_independente = st.checkbox("Tornar agente independente (remover heran√ßa)")
                                if tornar_independente:
                                    agente_mae_id = None
                                    herdar_elementos = []
                                else:
                                    agente_mae_id = agente.get('agente_mae_id')
                                    herdar_elementos = agente.get('herdar_elementos', [])
                            else:
                                agente_mae_id = None
                                herdar_elementos = []
                                # Op√ß√£o para adicionar heran√ßa
                                adicionar_heranca = st.checkbox("Adicionar heran√ßa de agente m√£e")
                                if adicionar_heranca:
                                    # Listar TODOS os agentes dispon√≠veis para heran√ßa (excluindo o pr√≥prio)
                                    agentes_mae = listar_agentes_para_heranca(agente['_id'])
                                    if agentes_mae:
                                        agente_mae_options = {f"{agente_mae['nome']} ({agente_mae.get('categoria', 'Social')})": agente_mae['_id'] for agente_mae in agentes_mae}
                                        if agente_mae_options:
                                            agente_mae_selecionado = st.selectbox(
                                                "Agente M√£e:",
                                                list(agente_mae_options.keys()),
                                                help="Selecione o agente do qual este agente ir√° herdar elementos"
                                            )
                                            agente_mae_id = agente_mae_options[agente_mae_selecionado]
                                            herdar_elementos = st.multiselect(
                                                "Elementos para herdar:",
                                                ["system_prompt", "base_conhecimento", "comments", "planejamento"],
                                                default=herdar_elementos
                                            )
                                        else:
                                            st.info("Nenhum agente dispon√≠vel para heran√ßa.")
                                    else:
                                        st.info("Nenhum agente dispon√≠vel para heran√ßa.")
                            
                            novo_prompt = st.text_area("Prompt de Sistema:", value=agente['system_prompt'], height=150)
                            nova_base = st.text_area("Brand Guidelines:", value=agente.get('base_conhecimento', ''), height=200)
                            nova_comment = st.text_area("Coment√°rios:", value=agente.get('comments', ''), height=200)
                            novo_planejamento = st.text_area("Planejamento:", value=agente.get('planejamento', ''), height=200)
                            
                            submitted = st.form_submit_button("Atualizar Agente")
                            if submitted:
                                if novo_nome:
                                    atualizar_agente(
                                        agente['_id'], 
                                        novo_nome, 
                                        novo_prompt, 
                                        nova_base, 
                                        nova_comment, 
                                        novo_planejamento,
                                        nova_categoria,
                                        agente_mae_id,
                                        herdar_elementos
                                    )
                                    st.success(f"Agente '{novo_nome}' atualizado com sucesso!")
                                    st.rerun()
                                else:
                                    st.error("Nome √© obrigat√≥rio!")
                else:
                    st.info("Nenhum agente criado ainda.")
            
            with sub_tab3:
                st.subheader("Gerenciar Agentes")
                
                # Filtros por categoria
                categorias = ["Todos", "Social", "SEO", "Conte√∫do"]
                categoria_filtro = st.selectbox("Filtrar por categoria:", categorias)
                
                agentes = listar_agentes()
                
                # Aplicar filtro
                if categoria_filtro != "Todos":
                    agentes = [agente for agente in agentes if agente.get('categoria') == categoria_filtro]
                
                if agentes:
                    for i, agente in enumerate(agentes):
                        with st.expander(f"{agente['nome']} - {agente.get('categoria', 'Social')} - Criado em {agente['data_criacao'].strftime('%d/%m/%Y')}"):
                            
                            # Mostrar informa√ß√µes de heran√ßa
                            if agente.get('agente_mae_id'):
                                agente_mae = obter_agente(agente['agente_mae_id'])
                                if agente_mae:
                                    st.write(f"**üîó Herda de:** {agente_mae['nome']}")
                                    st.write(f"**Elementos herdados:** {', '.join(agente.get('herdar_elementos', []))}")
                            
                            st.write(f"**Prompt de Sistema:** {agente['system_prompt'][:100]}..." if agente['system_prompt'] else "**Prompt de Sistema:** (herdado ou vazio)")
                            if agente.get('base_conhecimento'):
                                st.write(f"**Brand Guidelines:** {agente['base_conhecimento'][:200]}...")
                            if agente.get('comments'):
                                st.write(f"**Coment√°rios do cliente:** {agente['comments'][:200]}...")
                            if agente.get('planejamento'):
                                st.write(f"**Planejamento:** {agente['planejamento'][:200]}...")
                            
                            col1, col2 = st.columns(2)
                            with col1:
                                if st.button("Selecionar para Chat", key=f"select_{i}"):
                                    st.session_state.agente_selecionado = obter_agente_com_heranca(agente['_id'])
                                    st.session_state.messages = []
                                    st.success(f"Agente '{agente['nome']}' selecionado!")
                            with col2:
                                if st.button("Desativar", key=f"delete_{i}"):
                                    desativar_agente(agente['_id'])
                                    st.success(f"Agente '{agente['nome']}' desativado!")
                                    st.rerun()
                else:
                    st.info("Nenhum agente encontrado para esta categoria.")

with tab_chat:
    st.header("üí¨ Chat com Agente")
    
    # Sele√ß√£o de agente se n√£o houver um selecionado
    if not st.session_state.agente_selecionado:
        agentes = listar_agentes()
        if agentes:
            # Agrupar agentes por categoria
            agentes_por_categoria = {}
            for agente in agentes:
                categoria = agente.get('categoria', 'Social')
                if categoria not in agentes_por_categoria:
                    agentes_por_categoria[categoria] = []
                agentes_por_categoria[categoria].append(agente)
            
            # Sele√ß√£o com agrupamento
            agente_options = {}
            for categoria, agentes_cat in agentes_por_categoria.items():
                for agente in agentes_cat:
                    agente_completo = obter_agente_com_heranca(agente['_id'])
                    display_name = f"{agente['nome']} ({categoria})"
                    if agente.get('agente_mae_id'):
                        display_name += " üîó"
                    agente_options[display_name] = agente_completo
            
            agente_selecionado_display = st.selectbox("Selecione um agente para conversar:", 
                                                     list(agente_options.keys()))
            
            if st.button("Iniciar Conversa", key="iniciar_chat"):
                st.session_state.agente_selecionado = agente_options[agente_selecionado_display]
                st.session_state.messages = []
                st.rerun()
        else:
            st.info("Nenhum agente dispon√≠vel. Crie um agente primeiro na aba de Gerenciamento.")
    else:
        agente = st.session_state.agente_selecionado
        st.subheader(f"Conversando com: {agente['nome']}")
        
        # Mostrar informa√ß√µes de heran√ßa se aplic√°vel
        if 'agente_mae_id' in agente and agente['agente_mae_id']:
            agente_original = obter_agente(agente['_id'])
            if agente_original and agente_original.get('herdar_elementos'):
                st.info(f"üîó Este agente herda {len(agente_original['herdar_elementos'])} elementos do agente m√£e")
        
        # Controles de segmentos na sidebar do chat
        st.sidebar.subheader("üîß Configura√ß√µes do Agente")
        st.sidebar.write("Selecione quais bases de conhecimento usar:")
        
        segmentos_disponiveis = {
            "Prompt do Sistema": "system_prompt",
            "Brand Guidelines": "base_conhecimento", 
            "Coment√°rios do Cliente": "comments",
            "Planejamento": "planejamento"
        }
        
        segmentos_selecionados = []
        for nome, chave in segmentos_disponiveis.items():
            if st.sidebar.checkbox(nome, value=chave in st.session_state.segmentos_selecionados, key=f"seg_{chave}"):
                segmentos_selecionados.append(chave)
        
        st.session_state.segmentos_selecionados = segmentos_selecionados
        
        # Exibir status dos segmentos
        if segmentos_selecionados:
            st.sidebar.success(f"‚úÖ Usando {len(segmentos_selecionados)} segmento(s)")
        else:
            st.sidebar.warning("‚ö†Ô∏è Nenhum segmento selecionado")
        
        # Bot√£o para trocar de agente
        if st.button("Trocar de Agente", key="trocar_agente"):
            st.session_state.agente_selecionado = None
            st.session_state.messages = []
            st.rerun()
        
        # Exibir hist√≥rico de mensagens
        for message in st.session_state.messages:
            with st.chat_message(message["role"]):
                st.markdown(message["content"])
        
        # Input do usu√°rio
        if prompt := st.chat_input("Digite sua mensagem..."):
            # Adicionar mensagem do usu√°rio ao hist√≥rico
            st.session_state.messages.append({"role": "user", "content": prompt})
            with st.chat_message("user"):
                st.markdown(prompt)
            
            # Construir contexto com segmentos selecionados
            contexto = construir_contexto(
                agente, 
                st.session_state.segmentos_selecionados, 
                st.session_state.messages
            )
            
            # Gerar resposta
            with st.chat_message("assistant"):
                with st.spinner('Pensando...'):
                    try:
                        resposta = modelo_texto.generate_content(contexto)
                        st.markdown(resposta.text)
                        
                        # Adicionar ao hist√≥rico
                        st.session_state.messages.append({"role": "assistant", "content": resposta.text})
                        
                        # Salvar conversa com segmentos utilizados
                        salvar_conversa(
                            agente['_id'], 
                            st.session_state.messages,
                            st.session_state.segmentos_selecionados
                        )
                        
                    except Exception as e:
                        st.error(f"Erro ao gerar resposta: {str(e)}")

# --- ABA UNIFICADA DE VALIDA√á√ÉO ---
with tab_validacao:
    st.header("‚úÖ Valida√ß√£o Unificada de Conte√∫do")
    
    if not st.session_state.agente_selecionado:
        st.info("Selecione um agente primeiro na aba de Chat")
    else:
        agente = st.session_state.agente_selecionado
        st.subheader(f"Valida√ß√£o com: {agente['nome']}")
        
        # Controles de segmentos para valida√ß√£o
        st.sidebar.subheader("üîß Configura√ß√µes de Valida√ß√£o")
        st.sidebar.write("Selecione bases para valida√ß√£o:")
        
        segmentos_validacao = st.sidebar.multiselect(
            "Bases para valida√ß√£o:",
            options=["system_prompt", "base_conhecimento", "comments", "planejamento"],
            default=st.session_state.get('segmentos_selecionados', ["system_prompt"]),
            key="validacao_segmentos"
        )
        
        # Subabas para diferentes tipos de valida√ß√£o
        subtab_video, subtab_imagem, subtab_texto = st.tabs(["üé¨ Valida√ß√£o de V√≠deo", "üñºÔ∏è Valida√ß√£o de Imagem", "‚úçÔ∏è Valida√ß√£o de Texto"])
        
        with subtab_video:
            st.subheader("üé¨ Valida√ß√£o de V√≠deos")
            
            # Sele√ß√£o do tipo de entrada
            entrada_tipo = st.radio(
                "Escolha o tipo de entrada:",
                ["Upload de Arquivo", "URL do YouTube"],
                horizontal=True,
                key="video_input_type"
            )
            
            # Configura√ß√µes de an√°lise
            tipo_analise = st.selectbox(
                "Tipo de An√°lise:",
                ["completa", "rapida", "tecnica", "transcricao"],
                format_func=lambda x: {
                    "completa": "üìä An√°lise Completa",
                    "rapida": "‚ö° An√°lise R√°pida", 
                    "tecnica": "üõ†Ô∏è An√°lise T√©cnica",
                    "transcricao": "üéôÔ∏è Transcri√ß√£o + An√°lise"
                }[x],
                key="tipo_analise"
            )
            
            if entrada_tipo == "Upload de Arquivo":
                st.subheader("üì§ Upload de V√≠deo")
                
                uploaded_video = st.file_uploader(
                    "Carregue o v√≠deo para an√°lise",
                    type=["mp4", "mpeg", "mov", "avi", "flv", "mpg", "webm", "wmv", "3gpp"],
                    help="Formatos suportados: MP4, MPEG, MOV, AVI, FLV, MPG, WEBM, WMV, 3GPP. M√°ximo 20MB para upload direto.",
                    key="video_uploader"
                )
                
                if uploaded_video:
                    # Verificar tamanho do arquivo
                    if uploaded_video.size > 20 * 1024 * 1024:  # 20MB
                        st.error("‚ùå Arquivo muito grande para upload direto. Use a op√ß√£o URL do YouTube ou reduza o tamanho do v√≠deo.")
                    else:
                        # Exibir informa√ß√µes do v√≠deo
                        col_info1, col_info2 = st.columns(2)
                        with col_info1:
                            st.info(f"üìπ Arquivo: {uploaded_video.name}")
                        with col_info2:
                            st.info(f"üìè Tamanho: {uploaded_video.size / (1024*1024):.2f} MB")
                        
                        # Exibir preview do v√≠deo
                        st.video(uploaded_video)
                        
                        # Bot√£o de an√°lise
                        if st.button("üé¨ Iniciar An√°lise do V√≠deo", type="primary", key="analise_upload"):
                            with st.spinner('Analisando v√≠deo com Gemini... Isso pode levar alguns minutos'):
                                try:
                                    # Ler bytes do v√≠deo
                                    video_bytes = uploaded_video.read()
                                    
                                    # Construir contexto com segmentos selecionados
                                    contexto = construir_contexto(agente, segmentos_validacao)
                                    
                                    # Preparar prompt para an√°lise baseado no tipo
                                    if tipo_analise == "completa":
                                        prompt_analise = f"""
                                        {contexto}
                                        
                                        Analise este v√≠deo COMPLETAMENTE considerando as diretrizes fornecidas acima.
                                        
                                        Forne√ßa a an√°lise no seguinte formato:
                                        
                                        ## üìã RELAT√ìRIO DE AN√ÅLISE DE V√çDEO
                                        **Arquivo:** {uploaded_video.name}
                                        **Tipo de An√°lise:** An√°lise Completa
                                        **Agente Validador:** {agente['nome']}
                                        **Segmentos Utilizados:** {', '.join(segmentos_validacao)}
                                        
                                        ### üéØ RESUMO EXECUTIVO
                                        [Avalia√ß√£o geral de conformidade com as diretrizes do agente]
                                        
                                        ### üìä AN√ÅLISE DE CONFORMIDADE
                                        **Alinhamento com Diretrizes:**
                                        - [Avalie o alinhamento com system_prompt]
                                        - [Verifique conformidade com base_conhecimento]
                                        - [Analise ader√™ncia aos comments]
                                        - [Avalie alinhamento com planejamento]
                                        
                                        ### üé® ASPECTOS VISUAIS
                                        - **Identidade Visual**: [Avalie cores, logos, tipografia conforme diretrizes]
                                        - **Qualidade de Produ√ß√£o**: [Analise qualidade t√©cnica]
                                        - **Consist√™ncia da Marca**: [Verifique manuten√ß√£o da identidade]
                                        
                                        ### üîä ASPECTOS DE √ÅUDIO
                                        - [Qualidade, trilha sonora, voz conforme padr√µes]
                                        
                                        ### üî§ TEXTOS VIS√çVEIS
                                        - [Analise legendas, t√≠tulos, gr√°ficos quanto √† conformidade textual]
                                        - [Verifique erros ortogr√°ficos e adequa√ß√£o lingu√≠stica]
                                        
                                        ### ‚úÖ PONTOS FORTES
                                        - [Lista de aspectos que est√£o em conformidade]
                                        
                                        ### ‚ö†Ô∏è PONTOS DE ATEN√á√ÉO
                                        - [Lista de aspectos que precisam de ajustes para atender √†s diretrizes]
                                        
                                        ### üìã RECOMENDA√á√ïES ESPEC√çFICAS
                                        [A√ß√µes recomendadas baseadas nas diretrizes do agente]
                                        
                                        ### üèÜ AVALIA√á√ÉO FINAL
                                        [Status: Aprovado/Reprovado/Com ajustes necess√°rios] - [Justificativa baseada nas diretrizes]
                                        """
                                    elif tipo_analise == "rapida":
                                        prompt_analise = f"""
                                        {contexto}
                                        
                                        Fa√ßa uma an√°lise R√ÅPIDA deste v√≠deo focando nos aspectos mais cr√≠ticos de conformidade com as diretrizes fornecidas.
                                        
                                        ## üìã RELAT√ìRIO R√ÅPIDO DE CONFORMIDADE
                                        **Arquivo:** {uploaded_video.name}
                                        **Agente Validador:** {agente['nome']}
                                        
                                        ### üîç AN√ÅLISE R√ÅPIDA
                                        - **Conformidade Geral**: [Avalia√ß√£o geral com diretrizes]
                                        - **Principais Pontos Conformes**: [2-3 pontos]
                                        - **Problemas Cr√≠ticos Identificados**: [2-3 pontos que violam diretrizes]
                                        - **Recomenda√ß√£o Imediata**: [Aprovar/Reprovar/Ajustar baseado nas diretrizes]
                                        """
                                    elif tipo_analise == "tecnica":
                                        prompt_analise = f"""
                                        {contexto}
                                        
                                        Fa√ßa uma an√°lise T√âCNICA detalhada do v√≠deo considerando os padr√µes t√©cnicos das diretrizes.
                                        
                                        ## üõ†Ô∏è RELAT√ìRIO T√âCNICO
                                        **Arquivo:** {uploaded_video.name}
                                        **Agente Validador:** {agente['nome']}
                                        
                                        ### üìä AN√ÅLISE T√âCNICA
                                        - **Qualidade de V√≠deo**: [Avalie conforme padr√µes t√©cnicos das diretrizes]
                                        - **Qualidade de √Åudio**: [Analise conforme especifica√ß√µes]
                                        - **Aspectos T√©cnicos Conformes**: 
                                        - **Problemas T√©cnicos Identificados**:
                                        - **Recomenda√ß√µes T√©cnicas Baseadas nas Diretrizes**:
                                        """
                                    else:  # transcricao
                                        prompt_analise = f"""
                                        {contexto}
                                        
                                        TRANSCREVA o √°udio deste v√≠deo e forne√ßa uma an√°lise de conformidade com as diretrizes fornecidas.
                                        
                                        ## üéôÔ∏è TRANSCRI√á√ÉO E AN√ÅLISE
                                        **Arquivo:** {uploaded_video.name}
                                        **Agente Validador:** {agente['nome']}
                                        
                                        ### üìù TRANSCRI√á√ÉO COMPLETA
                                        [Transcreva todo o √°udio com timestamps]
                                        
                                        ### üîç AN√ÅLISE DE CONFORMIDADE
                                        - [Analise o conte√∫do transcrito em rela√ß√£o √†s diretrizes]
                                        - [Verifique tom, linguagem e mensagem conforme especifica√ß√µes]
                                        - [Avalie conformidade com brand guidelines]
                                        """
                                    
                                    # Fazer requisi√ß√£o para Gemini com v√≠deo inline
                                    response = modelo_vision.generate_content(
                                        contents=[
                                            types.Part(
                                                inline_data=types.Blob(
                                                    data=video_bytes,
                                                    mime_type=uploaded_video.type
                                                )
                                            ),
                                            types.Part(text=prompt_analise)
                                        ]
                                    )
                                    
                                    st.subheader("üìã Resultado da An√°lise")
                                    st.markdown(response.text)
                                    
                                    # Op√ß√£o para download do relat√≥rio
                                    st.download_button(
                                        "üíæ Baixar Relat√≥rio",
                                        data=response.text,
                                        file_name=f"relatorio_video_{uploaded_video.name}_{datetime.datetime.now().strftime('%Y%m%d_%H%M%S')}.txt",
                                        mime="text/plain",
                                        key="download_upload"
                                    )
                                    
                                except Exception as e:
                                    st.error(f"‚ùå Erro ao analisar v√≠deo: {str(e)}")
                                    st.info("üí° Dica: Verifique se o v√≠deo est√° em formato suportado e tente novamente.")
            
            else:  # URL do YouTube
                st.subheader("üîó URL do YouTube")
                
                youtube_url = st.text_input(
                    "Cole a URL do v√≠deo do YouTube:",
                    placeholder="https://www.youtube.com/watch?v=...",
                    help="A URL deve ser p√∫blica (n√£o privada ou n√£o listada)",
                    key="youtube_url"
                )
                
                if youtube_url:
                    # Validar URL do YouTube
                    if "youtube.com" in youtube_url or "youtu.be" in youtube_url:
                        st.success("‚úÖ URL do YouTube v√°lida detectada")
                        
                        # Bot√£o de an√°lise
                        if st.button("üé¨ Iniciar An√°lise do V√≠deo", type="primary", key="analise_youtube"):
                            with st.spinner('Analisando v√≠deo do YouTube com Gemini...'):
                                try:
                                    # Construir contexto com segmentos selecionados
                                    contexto = construir_contexto(agente, segmentos_validacao)
                                    
                                    # Preparar prompt para an√°lise
                                    prompt_analise = f"""
                                    {contexto}
                                    
                                    Analise este v√≠deo do YouTube considerando as diretrizes fornecidas acima.
                                    
                                    ## üìã RELAT√ìRIO DE AN√ÅLISE - YOUTUBE
                                    **URL:** {youtube_url}
                                    **Tipo de An√°lise:** {tipo_analise}
                                    **Agente Validador:** {agente['nome']}
                                    **Segmentos Utilizados:** {', '.join(segmentos_validacao)}
                                    
                                    ### üéØ AN√ÅLISE DE CONFORMIDADE
                                    **Alinhamento com Diretrizes:**
                                    - [Avalie conformidade com system_prompt]
                                    - [Verifique ader√™ncia √† base_conhecimento]
                                    - [Analise alinhamento com comments]
                                    - [Avalie conformidade com planejamento]
                                    
                                    ### üìä ASPECTOS ANALISADOS
                                    - **Conte√∫do e Mensagem**: [Alinhamento com diretrizes de conte√∫do]
                                    - **Identidade Visual**: [Conformidade com brand guidelines]
                                    - **Tom e Linguagem**: [Adequa√ß√£o ao tom da marca]
                                    - **Textos Vis√≠veis**: [Conformidade textual e ortogr√°fica]
                                    
                                    ### ‚úÖ PONTOS CONFORMES
                                    - [Aspectos que seguem as diretrizes]
                                    
                                    ### ‚ö†Ô∏è N√ÉO CONFORMIDADES
                                    - [Aspectos que violam as diretrizes]
                                    
                                    ### üìã A√á√ïES CORRETIVAS
                                    [Recomenda√ß√µes baseadas nas diretrizes do agente]
                                    
                                    ### üèÜ PARECER FINAL
                                    [Status baseado no grau de conformidade com as diretrizes]
                                    """
                                    
                                    # Fazer requisi√ß√£o para Gemini com URL do YouTube
                                    response = modelo_vision.generate_content(
                                        contents=[
                                            types.Part(
                                                file_data=types.FileData(
                                                    file_uri=youtube_url
                                                )
                                            ),
                                            types.Part(text=prompt_analise)
                                        ]
                                    )
                                    
                                    st.subheader("üìã Resultado da An√°lise")
                                    st.markdown(response.text)
                                    
                                    # Op√ß√£o para download do relat√≥rio
                                    st.download_button(
                                        "üíæ Baixar Relat√≥rio",
                                        data=response.text,
                                        file_name=f"relatorio_youtube_{datetime.datetime.now().strftime('%Y%m%d_%H%M%S')}.txt",
                                        mime="text/plain",
                                        key="download_youtube"
                                    )
                                    
                                except Exception as e:
                                    st.error(f"‚ùå Erro ao analisar v√≠deo do YouTube: {str(e)}")
                                    st.info("üí° Dica: Verifique se o v√≠deo √© p√∫blico e a URL est√° correta.")
                    else:
                        st.error("‚ùå Por favor, insira uma URL v√°lida do YouTube")
            
            # Se√ß√£o de informa√ß√µes
            with st.expander("‚ÑπÔ∏è Informa√ß√µes sobre An√°lise de V√≠deos"):
                st.markdown(f"""
                ### üé¨ An√°lise com {agente['nome']}
                
                **Diretrizes Aplicadas:**
                - System Prompt: {"‚úÖ" if "system_prompt" in segmentos_validacao else "‚ùå"}
                - Base de Conhecimento: {"‚úÖ" if "base_conhecimento" in segmentos_validacao else "‚ùå"}
                - Coment√°rios: {"‚úÖ" if "comments" in segmentos_validacao else "‚ùå"}
                - Planejamento: {"‚úÖ" if "planejamento" in segmentos_validacao else "‚ùå"}
                
                **Capacidades de An√°lise:**
                - Verifica√ß√£o de conformidade com brand guidelines
                - An√°lise de alinhamento com tom de voz
                - Valida√ß√£o de identidade visual
                - Checagem de textos vis√≠veis
                - Avalia√ß√£o t√©cnica de qualidade
                
                **Formatos Suportados:** MP4, MPEG, MOV, AVI, FLV, MPG, WEBM, WMV, 3GPP
                """)
        
        with subtab_imagem:
            st.subheader("üñºÔ∏è Valida√ß√£o de Imagens")
            
            uploaded_image = st.file_uploader(
                "Carregue imagem para an√°lise (.jpg, .png, .jpeg)", 
                type=["jpg", "jpeg", "png"], 
                key="image_upload_validacao",
                help="A an√°lise considerar√° as diretrizes do agente selecionado"
            )
            
            if uploaded_image:
                st.image(uploaded_image, use_column_width=True, caption="Pr√©-visualiza√ß√£o da Imagem")
                
                # Informa√ß√µes da imagem
                image = Image.open(uploaded_image)
                col_info1, col_info2, col_info3 = st.columns(3)
                with col_info1:
                    st.metric("üìê Dimens√µes", f"{image.width} x {image.height}")
                with col_info2:
                    st.metric("üìä Formato", uploaded_image.type)
                with col_info3:
                    st.metric("üíæ Tamanho", f"{uploaded_video.size / (1024*1024):.2f} MB")
                
                if st.button("üîç Validar Imagem", type="primary", key="validar_imagem"):
                    with st.spinner('Analisando imagem conforme diretrizes do agente...'):
                        try:
                            # Construir contexto com segmentos selecionados
                            contexto = construir_contexto(agente, segmentos_validacao)
                            
                            prompt_analise = f"""
                            {contexto}
                            
                            Analise esta imagem considerando as diretrizes fornecidas acima.
                            
                            ## üñºÔ∏è RELAT√ìRIO DE AN√ÅLISE DE IMAGEM
                            **Agente Validador:** {agente['nome']}
                            **Segmentos Utilizados:** {', '.join(segmentos_validacao)}
                            
                            ### üìä RESUMO DE CONFORMIDADE
                            [Avalia√ß√£o geral do alinhamento com as diretrizes]
                            
                            ### üé® AN√ÅLISE VISUAL
                            **Conformidade com Brand Guidelines:**
                            - [Avalie cores, logos, tipografia conforme diretrizes]
                            - [Verifique elementos visuais da marca]
                            - [Analise composi√ß√£o e layout conforme padr√µes]
                            
                            ### üî§ AN√ÅLISE DE TEXTOS NA IMAGEM
                            **Textos Identificados:**
                            - [Liste todos os textos vis√≠veis]
                            
                            **Conformidade Textual:**
                            - [Verifique se textos seguem base_conhecimento]
                            - [Identifique erros ortogr√°ficos]
                            - [Avalie adequa√ß√£o lingu√≠stica conforme diretrizes]
                            
                            ### ‚úÖ PONTOS CONFORMES
                            - [Aspectos que atendem √†s diretrizes]
                            
                            ### ‚ö†Ô∏è N√ÉO CONFORMIDADES
                            - [Aspectos que violam as diretrizes]
                            
                            ### üìã RECOMENDA√á√ïES
                            [A√ß√µes para adequa√ß√£o √†s diretrizes do agente]
                            
                            ### üèÜ PARECER FINAL
                            [Status baseado na conformidade com as diretrizes]
                            """
                            
                            # Processar imagem
                            response = modelo_vision.generate_content([
                                prompt_analise,
                                {"mime_type": "image/jpeg", "data": uploaded_image.getvalue()}
                            ])
                            
                            st.subheader("üìã Resultado da An√°lise da Imagem")
                            st.markdown(response.text)
                            
                            # Op√ß√£o para download do relat√≥rio
                            st.download_button(
                                "üíæ Baixar Relat√≥rio da Imagem",
                                data=response.text,
                                file_name=f"relatorio_imagem_{datetime.datetime.now().strftime('%Y%m%d_%H%M%S')}.txt",
                                mime="text/plain",
                                key="download_imagem"
                            )
                            
                        except Exception as e:
                            st.error(f"‚ùå Erro ao processar imagem: {str(e)}")
        
        with subtab_texto:
            st.subheader("‚úçÔ∏è Valida√ß√£o de Textos")
            
            texto_input = st.text_area(
                "Insira o texto para valida√ß√£o:", 
                height=300, 
                key="texto_validacao",
                placeholder="Cole aqui o texto que deseja validar...",
                help="O texto ser√° analisado considerando as diretrizes do agente selecionado"
            )
            
            if st.button("‚úÖ Validar Texto", type="primary", key="validate_text"):
                if not texto_input.strip():
                    st.warning("‚ö†Ô∏è Por favor, insira um texto para valida√ß√£o.")
                else:
                    with st.spinner('Analisando texto conforme diretrizes do agente...'):
                        try:
                            # Construir contexto com segmentos selecionados
                            contexto = construir_contexto(agente, segmentos_validacao)
                            
                            prompt_analise = f"""
                            {contexto}
                            
                            Analise este texto e forne√ßa um parecer detalhado de conformidade com as diretrizes fornecidas:
                            
                            ## TEXTO PARA AN√ÅLISE:
                            {texto_input}
                            
                            ## FORMATO DA RESPOSTA:
                            
                            ### üìä AN√ÅLISE DE CONFORMIDADE
                            **Agente Validador:** {agente['nome']}
                            **Segmentos Utilizados:** {', '.join(segmentos_validacao)}
                            
                            [Resumo da an√°lise e conformidade geral com as diretrizes]
                            
                            ### ‚úÖ PONTOS CONFORMES
                            - [Lista de aspectos que atendem √†s diretrizes]
                            
                            ### ‚ö†Ô∏è N√ÉO CONFORMIDADES
                            - [Lista de aspectos que violam as diretrizes]
                            
                            ### üî§ AN√ÅLISE TEXTUAL DETALHADA
                            - **Ortografia e Gram√°tica**: [Avalia√ß√£o de corre√ß√£o lingu√≠stica conforme padr√µes]
                            - **Tom e Linguagem**: [Adequa√ß√£o ao tom da marca definido nas diretrizes]
                            - **Clareza e Objetividade**: [Conformidade com guidelines de comunica√ß√£o]
                            - **Conformidade com Diretrizes**: [Alinhamento espec√≠fico com cada segmento utilizado]
                            
                            ### üìã A√á√ïES RECOMENDADAS
                            - [A√ß√µes espec√≠ficas para adequa√ß√£o √†s diretrizes do agente]
                            
                            ### üèÜ AVALIA√á√ÉO FINAL
                            [Status: Aprovado/Reprovado/Com ajustes necess√°rios]
                            [Justificativa detalhada baseada nas diretrizes]
                            
                            ### ‚úçÔ∏è VERS√ÉO AJUSTADA (se aplic√°vel)
                            [Texto revisado e otimizado para conformidade com as diretrizes]
                            """
                            
                            resposta = modelo_texto.generate_content(prompt_analise)
                            st.subheader("üìã Resultado da An√°lise Textual")
                            st.markdown(resposta.text)
                            
                            # Op√ß√£o para download
                            st.download_button(
                                "üíæ Baixar Relat√≥rio de Texto",
                                data=resposta.text,
                                file_name=f"relatorio_texto_{datetime.datetime.now().strftime('%Y%m%d_%H%M%S')}.txt",
                                mime="text/plain",
                                key="download_texto_validacao"
                            )
                            
                        except Exception as e:
                            st.error(f"‚ùå Erro ao validar texto: {str(e)}")
            
            # Se√ß√£o informativa
            with st.expander("‚ÑπÔ∏è Sobre Valida√ß√£o de Textos"):
                st.markdown(f"""
                ### ‚úçÔ∏è Valida√ß√£o com {agente['nome']}
                
                **Diretrizes Aplicadas:**
                - System Prompt: {"‚úÖ" if "system_prompt" in segmentos_validacao else "‚ùå"}
                - Base de Conhecimento: {"‚úÖ" if "base_conhecimento" in segmentos_validacao else "‚ùå"} 
                - Coment√°rios: {"‚úÖ" if "comments" in segmentos_validacao else "‚ùå"}
                - Planejamento: {"‚úÖ" if "planejamento" in segmentos_validacao else "‚ùå"}
                
                **Crit√©rios de Avalia√ß√£o:**
                - Conformidade Total: Texto totalmente alinhado com todas as diretrizes
                - Ajustes Menores: Pequenas corre√ß√µes necess√°rias para conformidade
                - Revis√£o Significativa: Mudan√ßas estruturais para atender diretrizes
                - N√£o Conforme: Texto precisa ser reescrito para conformidade
                
                **Benef√≠cios da Valida√ß√£o Contextual:**
                - Garantia de consist√™ncia com as diretrizes da marca
                - Alinhamento estrat√©gico com objetivos definidos
                - Redu√ß√£o de retrabalho por n√£o conformidade
                - Fortalecimento da identidade da marca
                """)


# ========== ABA: GERA√á√ÉO DE CONTE√öDO ==========
with tab_geracao:
    st.header("‚ú® Gera√ß√£o de Conte√∫do com M√∫ltiplos Insumos")
    
    # Conex√£o com MongoDB para briefings
    try:
        client2 = MongoClient("mongodb+srv://gustavoromao3345:RqWFPNOJQfInAW1N@cluster0.5iilj.mongodb.net/auto_doc?retryWrites=true&w=majority&ssl=true&ssl_cert_reqs=CERT_NONE&tlsAllowInvalidCertificates=true")
        db_briefings = client2['briefings_Broto_Tecnologia']
        collection_briefings = db_briefings['briefings']
        mongo_connected_conteudo = True
    except Exception as e:
        st.error(f"Erro na conex√£o com MongoDB: {str(e)}")
        mongo_connected_conteudo = False

    # Fun√ß√£o para extrair texto de diferentes tipos de arquivo
    def extrair_texto_arquivo(arquivo):
        """Extrai texto de diferentes formatos de arquivo"""
        try:
            extensao = arquivo.name.split('.')[-1].lower()
            
            if extensao == 'pdf':
                return extrair_texto_pdf(arquivo)
            elif extensao == 'txt':
                return extrair_texto_txt(arquivo)
            elif extensao in ['pptx', 'ppt']:
                return extrair_texto_pptx(arquivo)
            elif extensao in ['docx', 'doc']:
                return extrair_texto_docx(arquivo)
            else:
                return f"Formato {extensao} n√£o suportado para extra√ß√£o de texto."
                
        except Exception as e:
            return f"Erro ao extrair texto do arquivo {arquivo.name}: {str(e)}"

    def extrair_texto_pdf(arquivo):
        """Extrai texto de arquivos PDF"""
        try:
            import PyPDF2
            pdf_reader = PyPDF2.PdfReader(arquivo)
            texto = ""
            for pagina in pdf_reader.pages:
                texto += pagina.extract_text() + "\n"
            return texto
        except Exception as e:
            return f"Erro na leitura do PDF: {str(e)}"

    def extrair_texto_txt(arquivo):
        """Extrai texto de arquivos TXT"""
        try:
            return arquivo.read().decode('utf-8')
        except:
            try:
                return arquivo.read().decode('latin-1')
            except Exception as e:
                return f"Erro na leitura do TXT: {str(e)}"

    def extrair_texto_pptx(arquivo):
        """Extrai texto de arquivos PowerPoint"""
        try:
            from pptx import Presentation
            import io
            prs = Presentation(io.BytesIO(arquivo.read()))
            texto = ""
            for slide in prs.slides:
                for shape in slide.shapes:
                    if hasattr(shape, "text"):
                        texto += shape.text + "\n"
            return texto
        except Exception as e:
            return f"Erro na leitura do PowerPoint: {str(e)}"

    def extrair_texto_docx(arquivo):
        """Extrai texto de arquivos Word"""
        try:
            import docx
            import io
            doc = docx.Document(io.BytesIO(arquivo.read()))
            texto = ""
            for para in doc.paragraphs:
                texto += para.text + "\n"
            return texto
        except Exception as e:
            return f"Erro na leitura do Word: {str(e)}"

    # Layout principal
    col1, col2 = st.columns([2, 1])
    
    with col1:
        st.subheader("üìù Fontes de Conte√∫do")
        
        # Op√ß√£o 1: Upload de m√∫ltiplos arquivos
        st.write("**üìé Upload de Arquivos (PDF, TXT, PPTX, DOCX):**")
        arquivos_upload = st.file_uploader(
            "Selecione um ou mais arquivos:",
            type=['pdf', 'txt', 'pptx', 'ppt', 'docx', 'doc'],
            accept_multiple_files=True,
            help="Arquivos ser√£o convertidos para texto e usados como base para gera√ß√£o de conte√∫do"
        )
        
        # Processar arquivos uploadados
        textos_arquivos = ""
        if arquivos_upload:
            st.success(f"‚úÖ {len(arquivos_upload)} arquivo(s) carregado(s)")
            
            with st.expander("üìã Visualizar Conte√∫do dos Arquivos", expanded=False):
                for i, arquivo in enumerate(arquivos_upload):
                    st.write(f"**{arquivo.name}** ({arquivo.size} bytes)")
                    with st.spinner(f"Processando {arquivo.name}..."):
                        texto_extraido = extrair_texto_arquivo(arquivo)
                        textos_arquivos += f"\n\n--- CONTE√öDO DE {arquivo.name.upper()} ---\n{texto_extraido}"
                        
                        # Mostrar preview
                        if len(texto_extraido) > 500:
                            st.text_area(f"Preview - {arquivo.name}", 
                                       value=texto_extraido[:500] + "...", 
                                       height=100,
                                       key=f"preview_{i}")
                        else:
                            st.text_area(f"Preview - {arquivo.name}", 
                                       value=texto_extraido, 
                                       height=100,
                                       key=f"preview_{i}")
        
        # Op√ß√£o 2: Selecionar briefing do banco de dados
        st.write("**üóÉÔ∏è Briefing do Banco de Dados:**")
        if mongo_connected_conteudo:
            briefings_disponiveis = list(collection_briefings.find().sort("data_criacao", -1).limit(20))
            if briefings_disponiveis:
                briefing_options = {f"{briefing['nome_projeto']} ({briefing['tipo']}) - {briefing['data_criacao'].strftime('%d/%m/%Y')}": briefing for briefing in briefings_disponiveis}
                briefing_selecionado = st.selectbox("Escolha um briefing:", list(briefing_options.keys()))
                
                if briefing_selecionado:
                    briefing_data = briefing_options[briefing_selecionado]
                    st.info(f"Briefing selecionado: {briefing_data['nome_projeto']}")
            else:
                st.info("Nenhum briefing encontrado no banco de dados.")
        else:
            st.warning("Conex√£o com MongoDB n√£o dispon√≠vel")
        
        # Op√ß√£o 3: Inserir briefing manualmente
        st.write("**‚úçÔ∏è Briefing Manual:**")
        briefing_manual = st.text_area("Ou cole o briefing completo aqui:", height=150,
                                      placeholder="""Exemplo:
T√≠tulo: Campanha de Lan√ßamento
Objetivo: Divulgar novo produto
P√∫blico-alvo: Empres√°rios...
Pontos-chave: [lista os principais pontos]""")
        
        # Transcri√ß√£o de √°udio/v√≠deo
        st.write("**üé§ Transcri√ß√£o de √Åudio/Video:**")
        arquivos_midia = st.file_uploader(
            "√Åudios/V√≠deos para transcri√ß√£o:",
            type=['mp3', 'wav', 'mp4', 'mov', 'avi'],
            accept_multiple_files=True,
            help="Arquivos de m√≠dia ser√£o transcritos automaticamente"
        )
        
        transcricoes_texto = ""
        if arquivos_midia:
            st.info(f"üé¨ {len(arquivos_midia)} arquivo(s) de m√≠dia carregado(s)")
            if st.button("üîÑ Transcrever Todos os Arquivos de M√≠dia"):
                with st.spinner("Transcrevendo arquivos de m√≠dia..."):
                    for arquivo in arquivos_midia:
                        tipo = "audio" if arquivo.type.startswith('audio') else "video"
                        transcricao = transcrever_audio_video(arquivo, tipo)
                        transcricoes_texto += f"\n\n--- TRANSCRI√á√ÉO DE {arquivo.name.upper()} ---\n{transcricao}"
                        st.success(f"‚úÖ {arquivo.name} transcrito!")
    
    with col2:
        st.subheader("‚öôÔ∏è Configura√ß√µes")
        
        tipo_conteudo = st.selectbox("Tipo de Conte√∫do:", 
                                   ["Post Social", "Artigo Blog", "Email Marketing", 
                                    "Landing Page", "Script V√≠deo", "Relat√≥rio T√©cnico",
                                    "Press Release", "Newsletter", "Case Study"])
        
        tom_voz = st.selectbox("Tom de Voz:", 
                              ["Formal", "Informal", "Persuasivo", "Educativo", 
                               "Inspirador", "T√©cnico", "Jornal√≠stico"])
        
        palavras_chave = st.text_input("Palavras-chave (opcional):",
                                      placeholder="separadas por v√≠rgula")
        
        numero_palavras = st.slider("N√∫mero de Palavras:", 100, 3000, 800)
        
        # Configura√ß√µes avan√ßadas
        with st.expander("üîß Configura√ß√µes Avan√ßadas"):
            usar_contexto_agente = st.checkbox("Usar contexto do agente selecionado", 
                                             value=bool(st.session_state.agente_selecionado))
            
            nivel_detalhe = st.select_slider("N√≠vel de Detalhe:", 
                                           ["Resumido", "Balanceado", "Detalhado", "Completo"])
            
            incluir_cta = st.checkbox("Incluir Call-to-Action", value=True)
            
            formato_saida = st.selectbox("Formato de Sa√≠da:", 
                                       ["Texto Simples", "Markdown", "HTML B√°sico"])

    # √Årea de instru√ß√µes espec√≠ficas
    st.subheader("üéØ Instru√ß√µes Espec√≠ficas")
    instrucoes_especificas = st.text_area(
        "Diretrizes adicionais para gera√ß√£o:",
        placeholder="""Exemplos:
- Focar nos benef√≠cios para o usu√°rio final
- Incluir estat√≠sticas quando poss√≠vel
- Manter linguagem acess√≠vel
- Evitar jarg√µes t√©cnicos excessivos
- Seguir estrutura: problema ‚Üí solu√ß√£o ‚Üí benef√≠cios""",
        height=100
    )

    # Bot√£o para gerar conte√∫do
    if st.button("üöÄ Gerar Conte√∫do com Todos os Insumos", type="primary", use_container_width=True):
        # Verificar se h√° pelo menos uma fonte de conte√∫do
        tem_conteudo = (arquivos_upload or 
                       briefing_manual or 
                       ('briefing_data' in locals() and briefing_data) or
                       arquivos_midia)
        
        if not tem_conteudo:
            st.error("‚ùå Por favor, forne√ßa pelo menos uma fonte de conte√∫do (arquivos, briefing ou m√≠dia)")
        else:
            with st.spinner("Processando todos os insumos e gerando conte√∫do..."):
                try:
                    # Construir o contexto combinado de todas as fontes
                    contexto_completo = "## FONTES DE CONTE√öDO COMBINADAS:\n\n"
                    
                    # Adicionar conte√∫do dos arquivos uploadados
                    if textos_arquivos:
                        contexto_completo += "### CONTE√öDO DOS ARQUIVOS:\n" + textos_arquivos + "\n\n"
                    
                    # Adicionar briefing do banco ou manual
                    if briefing_manual:
                        contexto_completo += "### BRIEFING MANUAL:\n" + briefing_manual + "\n\n"
                    elif 'briefing_data' in locals() and briefing_data:
                        contexto_completo += "### BRIEFING DO BANCO:\n" + briefing_data['conteudo'] + "\n\n"
                    
                    # Adicionar transcri√ß√µes
                    if transcricoes_texto:
                        contexto_completo += "### TRANSCRI√á√ïES DE M√çDIA:\n" + transcricoes_texto + "\n\n"
                    
                    # Adicionar contexto do agente se selecionado
                    contexto_agente = ""
                    if usar_contexto_agente and st.session_state.agente_selecionado:
                        agente = st.session_state.agente_selecionado
                        contexto_agente = construir_contexto(agente, st.session_state.segmentos_selecionados)
                    
                    # Construir prompt final
                    prompt_final = f"""
                    {contexto_agente}
                    
                    ## INSTRU√á√ïES PARA GERA√á√ÉO DE CONTE√öDO:
                    
                    **TIPO DE CONTE√öDO:** {tipo_conteudo}
                    **TOM DE VOZ:** {tom_voz}
                    **PALAVRAS-CHAVE:** {palavras_chave if palavras_chave else 'N√£o especificadas'}
                    **N√öMERO DE PALAVRAS:** {numero_palavras} (¬±10%)
                    **N√çVEL DE DETALHE:** {nivel_detalhe}
                    **INCLUIR CALL-TO-ACTION:** {incluir_cta}
                    
                    **INSTRU√á√ïES ESPEC√çFICAS:**
                    {instrucoes_especificas if instrucoes_especificas else 'Nenhuma instru√ß√£o espec√≠fica fornecida.'}
                    
                    ## FONTES E REFER√äNCIAS:
                    {contexto_completo}
                    
                    ## TAREFA:
                    Com base em TODAS as fontes fornecidas acima, gere um conte√∫do do tipo {tipo_conteudo} que:
                    
                    1. **S√≠ntese Eficiente:** Combine e sintetize informa√ß√µes de todas as fontes
                    2. **Coer√™ncia:** Mantenha consist√™ncia com as informa√ß√µes originais
                    3. **Valor Agregado:** V√° al√©m da simples c√≥pia, agregando insights
                    4. **Engajamento:** Crie conte√∫do que engaje o p√∫blico-alvo
                    5. **Clareza:** Comunique ideias complexas de forma acess√≠vel
                    
                    **FORMATO DE SA√çDA:** {formato_saida}
                    
                    Gere um conte√∫do completo e profissional.
                    """
                    
                    resposta = modelo_texto.generate_content(prompt_final)
                    
                    # Processar sa√≠da baseada no formato selecionado
                    conteudo_gerado = resposta.text
                    
                    if formato_saida == "HTML B√°sico":
                        # Converter markdown para HTML b√°sico
                        import re
                        conteudo_gerado = re.sub(r'\*\*(.*?)\*\*', r'<strong>\1</strong>', conteudo_gerado)
                        conteudo_gerado = re.sub(r'\*(.*?)\*', r'<em>\1</em>', conteudo_gerado)
                        conteudo_gerado = re.sub(r'### (.*?)\n', r'<h3>\1</h3>', conteudo_gerado)
                        conteudo_gerado = re.sub(r'## (.*?)\n', r'<h2>\1</h2>', conteudo_gerado)
                        conteudo_gerado = re.sub(r'# (.*?)\n', r'<h1>\1</h1>', conteudo_gerado)
                        conteudo_gerado = conteudo_gerado.replace('\n', '<br>')
                    
                    st.subheader("üìÑ Conte√∫do Gerado")
                    
                    if formato_saida == "HTML B√°sico":
                        st.components.v1.html(conteudo_gerado, height=400, scrolling=True)
                    else:
                        st.markdown(conteudo_gerado)
                    
                    # Estat√≠sticas
                    palavras_count = len(conteudo_gerado.split())
                    col_stat1, col_stat2, col_stat3 = st.columns(3)
                    with col_stat1:
                        st.metric("Palavras Geradas", palavras_count)
                    with col_stat2:
                        st.metric("Arquivos Processados", len(arquivos_upload) if arquivos_upload else 0)
                    with col_stat3:
                        st.metric("Fontes Utilizadas", 
                                 (1 if arquivos_upload else 0) + 
                                 (1 if briefing_manual or 'briefing_data' in locals() else 0) +
                                 (1 if transcricoes_texto else 0))
                    
                    # Bot√µes de download
                    extensao = ".html" if formato_saida == "HTML B√°sico" else ".md" if formato_saida == "Markdown" else ".txt"
                    
                    st.download_button(
                        f"üíæ Baixar Conte√∫do ({formato_saida})",
                        data=conteudo_gerado,
                        file_name=f"conteudo_gerado_{datetime.datetime.now().strftime('%Y%m%d_%H%M')}{extensao}",
                        mime="text/html" if formato_saida == "HTML B√°sico" else "text/plain"
                    )
                    
                    # Salvar no hist√≥rico se MongoDB dispon√≠vel
                    if mongo_connected_conteudo:
                        try:
                            from bson import ObjectId
                            historico_data = {
                                "tipo_conteudo": tipo_conteudo,
                                "tom_voz": tom_voz,
                                "palavras_chave": palavras_chave,
                                "numero_palavras": numero_palavras,
                                "conteudo_gerado": conteudo_gerado,
                                "fontes_utilizadas": {
                                    "arquivos_upload": [arquivo.name for arquivo in arquivos_upload] if arquivos_upload else [],
                                    "briefing_manual": bool(briefing_manual),
                                    "transcricoes": len(arquivos_midia) if arquivos_midia else 0
                                },
                                "data_criacao": datetime.datetime.now()
                            }
                            db_briefings['historico_geracao'].insert_one(historico_data)
                            st.success("‚úÖ Conte√∫do salvo no hist√≥rico!")
                        except Exception as e:
                            st.warning(f"Conte√∫do gerado, mas n√£o salvo no hist√≥rico: {str(e)}")
                    
                except Exception as e:
                    st.error(f"‚ùå Erro ao gerar conte√∫do: {str(e)}")
                    st.info("üí° Dica: Verifique se os arquivos n√£o est√£o corrompidos e tente novamente.")

    # Se√ß√£o de hist√≥rico r√°pido
    if mongo_connected_conteudo:
        with st.expander("üìö Hist√≥rico de Gera√ß√µes Recentes"):
            try:
                historico = list(db_briefings['historico_geracao'].find().sort("data_criacao", -1).limit(5))
                if historico:
                    for item in historico:
                        st.write(f"**{item['tipo_conteudo']}** - {item['data_criacao'].strftime('%d/%m/%Y %H:%M')}")
                        st.caption(f"Palavras-chave: {item.get('palavras_chave', 'Nenhuma')} | Tom: {item['tom_voz']}")
                        with st.expander("Ver conte√∫do"):
                            st.write(item['conteudo_gerado'][:500] + "..." if len(item['conteudo_gerado']) > 500 else item['conteudo_gerado'])
                else:
                    st.info("Nenhuma gera√ß√£o no hist√≥rico")
            except Exception as e:
                st.warning(f"Erro ao carregar hist√≥rico: {str(e)}")

with tab_resumo:
    st.header("üìù Resumo de Textos")
    
    if not st.session_state.agente_selecionado:
        st.info("Selecione um agente primeiro na aba de Chat")
    else:
        agente = st.session_state.agente_selecionado
        st.subheader(f"Resumo com: {agente['nome']}")
        
        col_original, col_resumo = st.columns(2)
        
        with col_original:
            st.subheader("Texto Original")
            texto_original = st.text_area(
                "Cole o texto que deseja resumir:",
                height=400,
                placeholder="Insira aqui o texto completo...",
                key="texto_original"
            )
            
            with st.expander("‚öôÔ∏è Configura√ß√µes do Resumo"):
                nivel_resumo = st.select_slider(
                    "N√≠vel de Resumo:",
                    options=["Extenso", "Moderado", "Conciso"],
                    value="Moderado",
                    key="nivel_resumo"
                )
                
                incluir_pontos = st.checkbox(
                    "Incluir pontos-chave em t√≥picos",
                    value=True,
                    key="incluir_pontos"
                )
                
                manter_terminologia = st.checkbox(
                    "Manter terminologia t√©cnica",
                    value=True,
                    key="manter_terminologia"
                )
        
        with col_resumo:
            st.subheader("Resumo Gerado")
            
            if st.button("Gerar Resumo", key="gerar_resumo"):
                if not texto_original.strip():
                    st.warning("Por favor, insira um texto para resumir")
                else:
                    with st.spinner("Processando resumo..."):
                        try:
                            config_resumo = {
                                "Extenso": "um resumo detalhado mantendo cerca de 50% do conte√∫do original",
                                "Moderado": "um resumo conciso mantendo cerca de 30% do conte√∫do original",
                                "Conciso": "um resumo muito breve com apenas os pontos essenciais (cerca de 10-15%)"
                            }[nivel_resumo]
                            
                            prompt = f"""
                            {agente['system_prompt']}
                            
                            Brand Guidelines:
                            {agente.get('base_conhecimento', '')}
                            
                            Planejamento:
                            {agente.get('planejamento', '')}
                            
                            Crie um resumo deste texto com as seguintes caracter√≠sticas:
                            - {config_resumo}
                            - {"Inclua os principais pontos em t√≥picos" if incluir_pontos else "Formato de texto cont√≠nuo"}
                            - {"Mantenha a terminologia t√©cnica espec√≠fica" if manter_terminologia else "Simplifique a linguagem"}
                            
                            Texto para resumir:
                            {texto_original}
                            
                            Estrutura do resumo:
                            1. T√≠tulo do resumo
                            2. {"Principais pontos em t√≥picos" if incluir_pontos else "Resumo textual"}
                            3. Conclus√£o/Recomenda√ß√µes
                            """
                            
                            resposta = modelo_texto.generate_content(prompt)
                            st.markdown(resposta.text)
                            
                            st.download_button(
                                "üìã Copiar Resumo",
                                data=resposta.text,
                                file_name="resumo_gerado.txt",
                                mime="text/plain",
                                key="download_resumo"
                            )
                            
                        except Exception as e:
                            st.error(f"Erro ao gerar resumo: {str(e)}")

with tab_busca:
    st.header("üåê Busca Web com Perplexity")
    
    if not perp_api_key:
        st.error("‚ùå Chave da API Perplexity n√£o encontrada. Configure a vari√°vel de ambiente PERP_API_KEY.")
    else:
        st.success("‚úÖ API Perplexity configurada com sucesso!")
        
        # Sele√ß√£o de modo de busca
        modo_busca = st.radio(
            "Selecione o modo de busca:",
            ["üîç Busca Geral na Web", "üìã An√°lise de URLs Espec√≠ficas"],
            horizontal=True,
            key="modo_busca"
        )
        
        # Configura√ß√µes comuns
        col_config1, col_config2 = st.columns(2)
        
        with col_config1:
            usar_agente = st.checkbox(
                "Usar contexto do agente selecionado",
                value=st.session_state.agente_selecionado is not None,
                help="Utilizar o conhecimento do agente para contextualizar a busca",
                key="usar_agente_busca"
            )
        
        with col_config2:
            if usar_agente and st.session_state.agente_selecionado:
                agente = st.session_state.agente_selecionado
                st.info(f"üéØ Usando: {agente['nome']}")
            else:
                st.info("üîç Busca sem contexto espec√≠fico")
        
        if modo_busca == "üîç Busca Geral na Web":
            st.subheader("Busca Geral na Web")
            
            pergunta = st.text_area(
                "Digite sua pergunta para busca:",
                placeholder="Ex: Quais s√£o as √∫ltimas tend√™ncias em marketing digital para 2024?",
                height=100,
                key="pergunta_geral"
            )
            
            # Configura√ß√µes avan√ßadas
            with st.expander("‚öôÔ∏è Configura√ß√µes Avan√ßadas"):
                col_adv1, col_adv2 = st.columns(2)
                
                with col_adv1:
                    max_tokens = st.slider(
                        "Comprimento da resposta:",
                        min_value=500,
                        max_value=3000,
                        value=1500,
                        step=100,
                        key="max_tokens_geral"
                    )
                
                with col_adv2:
                    temperatura = st.slider(
                        "Criatividade:",
                        min_value=0.0,
                        max_value=1.0,
                        value=0.1,
                        step=0.1,
                        key="temp_geral"
                    )
            
            if st.button("üîé Realizar Busca", type="primary", key="buscar_geral"):
                if not pergunta.strip():
                    st.warning("‚ö†Ô∏è Por favor, digite uma pergunta para busca.")
                else:
                    with st.spinner("üîÑ Buscando informa√ß√µes na web..."):
                        # Construir contexto do agente se selecionado
                        contexto_agente = None
                        if usar_agente and st.session_state.agente_selecionado:
                            agente = st.session_state.agente_selecionado
                            contexto_agente = construir_contexto(agente, st.session_state.segmentos_selecionados)
                        
                        resultado = buscar_perplexity(
                            pergunta=pergunta,
                            contexto_agente=contexto_agente
                        )
                        
                        st.subheader("üìã Resultado da Busca")
                        st.markdown(resultado)
                        
                        # Op√ß√£o para download
                        st.download_button(
                            "üíæ Baixar Resultado",
                            data=resultado,
                            file_name=f"busca_web_{datetime.datetime.now().strftime('%Y%m%d_%H%M%S')}.txt",
                            mime="text/plain",
                            key="download_busca_geral"
                        )
        
        else:  # An√°lise de URLs Espec√≠ficas
            st.subheader("An√°lise de URLs Espec√≠ficas")
            
            urls_input = st.text_area(
                "Cole as URLs para an√°lise (uma por linha):",
                placeholder="https://exemplo.com/artigo1\nhttps://exemplo.com/artigo2\nhttps://exemplo.com/noticia",
                height=150,
                key="urls_input",
                help="Insira uma URL por linha. M√°ximo de 5 URLs por an√°lise."
            )
            
            pergunta_urls = st.text_area(
                "Digite a pergunta espec√≠fica para an√°lise:",
                placeholder="Ex: Com base nestas URLs, quais s√£o os pontos principais discutidos?",
                height=100,
                key="pergunta_urls"
            )
            
            if st.button("üîç Analisar URLs", type="primary", key="analisar_urls"):
                if not urls_input.strip() or not pergunta_urls.strip():
                    st.warning("‚ö†Ô∏è Por favor, preencha tanto as URLs quanto a pergunta.")
                else:
                    # Processar URLs
                    urls = [url.strip() for url in urls_input.split('\n') if url.strip()]
                    
                    if len(urls) > 5:
                        st.warning("‚ö†Ô∏è Muitas URLs. Analisando apenas as primeiras 5.")
                        urls = urls[:5]
                    
                    # Validar URLs
                    urls_validas = []
                    for url in urls:
                        if url.startswith(('http://', 'https://')):
                            urls_validas.append(url)
                        else:
                            st.warning(f"URL inv√°lida (falta http:// ou https://): {url}")
                    
                    if not urls_validas:
                        st.error("‚ùå Nenhuma URL v√°lida encontrada.")
                    else:
                        with st.spinner(f"üîÑ Analisando {len(urls_validas)} URL(s)..."):
                            # Construir contexto do agente se selecionado
                            contexto_agente = None
                            if usar_agente and st.session_state.agente_selecionado:
                                agente = st.session_state.agente_selecionado
                                contexto_agente = construir_contexto(agente, st.session_state.segmentos_selecionados)
                            
                            resultado = analisar_urls_perplexity(
                                urls=urls_validas,
                                pergunta=pergunta_urls,
                                contexto_agente=contexto_agente
                            )
                            
                            st.subheader("üìã Resultado da An√°lise")
                            st.markdown(resultado)
                            
                            # Mostrar URLs analisadas
                            st.info("### üåê URLs Analisadas:")
                            for i, url in enumerate(urls_validas, 1):
                                st.write(f"{i}. {url}")
                            
                            # Op√ß√£o para download
                            st.download_button(
                                "üíæ Baixar An√°lise",
                                data=resultado,
                                file_name=f"analise_urls_{datetime.datetime.now().strftime('%Y%m%d_%H%M%S')}.txt",
                                mime="text/plain",
                                key="download_analise_urls"
                            )
        
        # Se√ß√£o de informa√ß√µes
        with st.expander("‚ÑπÔ∏è Informa√ß√µes sobre Busca Web"):
            st.markdown("""
            ### üåê Capacidades da Busca Web
            
            **Busca Geral:**
            - Pesquisa em tempo real na web
            - Informa√ß√µes atualizadas
            - Cita√ß√µes de fontes confi√°veis
            - Respostas contextuais
            
            **An√°lise de URLs:**
            - Leitura e an√°lise de p√°ginas espec√≠ficas
            - Compara√ß√£o entre m√∫ltiplas fontes
            - Extra√ß√£o de pontos principais
            - S√≠ntese de informa√ß√µes
            
            ### ‚ö° Tecnologia Utilizada
            
            - **Motor**: Perplexity AI Sonar Medium Online
            - **Atualiza√ß√£o**: Dados em tempo real
            - **Fontes**: Diversas fontes confi√°veis da web
            - **Cita√ß√µes**: Inclui refer√™ncias √†s fontes
            
            ### üí° Dicas de Uso
            
            - Para buscas gerais, seja espec√≠fico na pergunta
            - Use o contexto do agente para respostas mais relevantes
            - Para URLs, prefira p√°ginas com conte√∫do textual
            - Limite de 5 URLs por an√°lise para melhor performance
            """)



# --- ABA: REVIS√ÉO ORTOGR√ÅFICA ---
with tab_revisao:
    st.header("üìù Revis√£o Ortogr√°fica e Gramatical")
    
    if not st.session_state.agente_selecionado:
        st.info("Selecione um agente primeiro na aba de Chat")
    else:
        agente = st.session_state.agente_selecionado
        st.subheader(f"Revis√£o com: {agente['nome']}")
        
        # Configura√ß√µes de segmentos para revis√£o
        st.sidebar.subheader("üîß Configura√ß√µes de Revis√£o")
        st.sidebar.write("Selecione bases para orientar a revis√£o:")
        
        segmentos_revisao = st.sidebar.multiselect(
            "Bases para revis√£o:",
            options=["system_prompt", "base_conhecimento", "comments", "planejamento"],
            default=st.session_state.segmentos_selecionados,
            key="revisao_segmentos"
        )
        
        # Layout em colunas
        col_original, col_resultado = st.columns(2)
        
        with col_original:
            st.subheader("üìÑ Texto Original")
            
            texto_para_revisao = st.text_area(
                "Cole o texto que deseja revisar:",
                height=400,
                placeholder="Cole aqui o texto que precisa de revis√£o ortogr√°fica e gramatical...",
                help="O texto ser√° analisado considerando as diretrizes do agente selecionado",
                key="texto_revisao"
            )
            
            # Estat√≠sticas do texto
            if texto_para_revisao:
                palavras = len(texto_para_revisao.split())
                caracteres = len(texto_para_revisao)
                paragrafos = texto_para_revisao.count('\n\n') + 1
                
                col_stats1, col_stats2, col_stats3 = st.columns(3)
                with col_stats1:
                    st.metric("üìä Palavras", palavras)
                with col_stats2:
                    st.metric("üî§ Caracteres", caracteres)
                with col_stats3:
                    st.metric("üìÑ Par√°grafos", paragrafos)
            
            # Configura√ß√µes de revis√£o
            with st.expander("‚öôÔ∏è Configura√ß√µes da Revis√£o"):
                revisao_estilo = st.checkbox(
                    "Incluir revis√£o de estilo",
                    value=True,
                    help="Analisar clareza, coes√£o e adequa√ß√£o ao tom da marca",
                    key="revisao_estilo"
                )
                
                manter_estrutura = st.checkbox(
                    "Manter estrutura original",
                    value=True,
                    help="Preservar a estrutura geral do texto quando poss√≠vel",
                    key="manter_estrutura"
                )
                
                explicar_alteracoes = st.checkbox(
                    "Explicar altera√ß√µes principais",
                    value=True,
                    help="Incluir justificativa para as mudan√ßas mais importantes",
                    key="explicar_alteracoes"
                )
        
        with col_resultado:
            st.subheader("üìã Resultado da Revis√£o")
            
            if st.button("üîç Realizar Revis√£o Completa", type="primary", key="revisar_texto"):
                if not texto_para_revisao.strip():
                    st.warning("‚ö†Ô∏è Por favor, cole o texto que deseja revisar.")
                else:
                    with st.spinner("üîÑ Analisando texto e realizando revis√£o..."):
                        try:
                            resultado = revisar_texto_ortografia(
                                texto=texto_para_revisao,
                                agente=agente,
                                segmentos_selecionados=segmentos_revisao
                            )
                            
                            st.markdown(resultado)
                            
                            # Op√ß√µes de download
                            col_dl1, col_dl2, col_dl3 = st.columns(3)
                            
                            with col_dl1:
                                st.download_button(
                                    "üíæ Baixar Relat√≥rio Completo",
                                    data=resultado,
                                    file_name=f"relatorio_revisao_{datetime.datetime.now().strftime('%Y%m%d_%H%M%S')}.txt",
                                    mime="text/plain",
                                    key="download_revisao_completo"
                                )
                            
                            with col_dl2:
                                # Extrair apenas o texto revisado se dispon√≠vel
                                if "## üìã TEXTO REVISADO" in resultado:
                                    texto_revisado_start = resultado.find("## üìã TEXTO REVISADO")
                                    texto_revisado_end = resultado.find("##", texto_revisado_start + 1)
                                    texto_revisado = resultado[texto_revisado_start:texto_revisado_end] if texto_revisado_end != -1 else resultado[texto_revisado_start:]
                                    
                                    st.download_button(
                                        "üìÑ Baixar Texto Revisado",
                                        data=texto_revisado,
                                        file_name=f"texto_revisado_{datetime.datetime.now().strftime('%Y%m%d_%H%M%S')}.txt",
                                        mime="text/plain",
                                        key="download_texto_revisado"
                                    )
                            
                            with col_dl3:
                                # Extrair apenas as explica√ß√µes se dispon√≠vel
                                if "## üîç EXPLICA√á√ÉO DAS PRINCIPAIS ALTERA√á√ïES" in resultado:
                                    explicacoes_start = resultado.find("## üîç EXPLICA√á√ÉO DAS PRINCIPAIS ALTERA√á√µes")
                                    explicacoes_end = resultado.find("##", explicacoes_start + 1)
                                    explicacoes = resultado[explicacoes_start:explicacoes_end] if explicacoes_end != -1 else resultado[explicacoes_start:]
                                    
                                    st.download_button(
                                        "üìù Baixar Explica√ß√µes",
                                        data=explicacoes,
                                        file_name=f"explicacoes_revisao_{datetime.datetime.now().strftime('%Y%m%d_%H%M%S')}.txt",
                                        mime="text/plain",
                                        key="download_explicacoes"
                                    )
                            
                        except Exception as e:
                            st.error(f"‚ùå Erro ao realizar revis√£o: {str(e)}")
        
        # Se√ß√£o informativa
        with st.expander("‚ÑπÔ∏è Sobre a Revis√£o Ortogr√°fica"):
            st.markdown("""
            ### üéØ O que √© Analisado
            
            **üî§ Ortografia:**
            - Erros de grafia e acentua√ß√£o
            - Uso correto de mai√∫sculas e min√∫sculas
            - Escrita de n√∫meros e datas
            - Concord√¢ncia nominal e verbal
            
            **üìñ Gram√°tica:**
            - Estrutura sint√°tica das frases
            - Uso adequado de preposi√ß√µes
            - Coloca√ß√£o pronominal
            - Reg√™ncia verbal e nominal
            
            **üî† Pontua√ß√£o:**
            - Uso de v√≠rgulas, pontos, dois-pontos
            - Aplica√ß√£o de travess√µes e par√™nteses
            - Pontua√ß√£o de cita√ß√µes e di√°logos
            
            **üìù Estilo e Clareza:**
            - Coes√£o e coer√™ncia textual
            - Adequa√ß√£o ao tom da marca
            - Clareza na comunica√ß√£o
            - Elimina√ß√£o de v√≠cios de linguagem
            
            ### üìä M√©tricas de Qualidade
            
            - **Ortografia**: Corre√ß√£o gramatical (0-10)
            - **Gram√°tica**: Estrutura lingu√≠stica (0-10)
            - **Clareza**: Facilidade de compreens√£o (0-10)
            - **Conformidade**: Adequa√ß√£o √†s diretrizes (0-10)
            - **Total**: Pontua√ß√£o geral (0-40)
            
            ### üí° Dicas para Melhor Revis√£o
            
            1. **Texto Completo**: Cole o texto integral para an√°lise detalhada
            2. **Segmentos Relevantes**: Selecione as bases de conhecimento apropriadas
            3. **Contexto Espec√≠fico**: Use agentes especializados para cada tipo de conte√∫do
            4. **Implementa√ß√£o**: Aplique as sugest√µes sistematicamente
            
            ### üé® Benef√≠cios da Revis√£o Contextual
            
            - **Consist√™ncia da Marca**: Mant√©m o tom e estilo adequados
            - **Qualidade Profissional**: Elimina erros que prejudicam a credibilidade
            - **Otimiza√ß√£o de Conte√∫do**: Melhora a clareza e impacto da comunica√ß√£o
            - **Efici√™ncia**: Reduz tempo de revis√£o manual
            """)

# --- Estiliza√ß√£o ---
st.markdown("""
<style>
    .stChatMessage {
        padding: 1rem;
        border-radius: 0.5rem;
        margin-bottom: 1rem;
    }
    [data-testid="stChatMessageContent"] {
        font-size: 1rem;
    }
    .stChatInput {
        bottom: 20px;
        position: fixed;
        width: calc(100% - 5rem);
    }
    div[data-testid="stTabs"] {
        margin-top: -30px;
    }
    div[data-testid="stVerticalBlock"] > div:has(>.stTextArea) {
        border-left: 3px solid #4CAF50;
        padding-left: 1rem;
    }
    .segment-indicator {
        background-color: #f0f2f6;
        padding: 0.5rem;
        border-radius: 0.5rem;
        margin: 0.5rem 0;
        border-left: 4px solid #4CAF50;
    }
    .video-analysis-card {
        background: linear-gradient(135deg, #667eea 0%, #764ba2 100%);
        color: white;
        padding: 1.5rem;
        border-radius: 10px;
        margin: 1rem 0;
    }
    .inheritance-badge {
        background-color: #e3f2fd;
        color: #1976d2;
        padding: 0.2rem 0.5rem;
        border-radius: 12px;
        font-size: 0.8rem;
        margin-left: 0.5rem;
    }
    .web-search-card {
        background: linear-gradient(135deg, #667eea 0%, #764ba2 100%);
        color: white;
        padding: 1.5rem;
        border-radius: 10px;
        margin: 1rem 0;
    }
    .seo-analysis-card {
        background: linear-gradient(135deg, #667eea 0%, #764ba2 100%);
        color: white;
        padding: 1.5rem;
        border-radius: 10px;
        margin: 1rem 0;
    }
    .spelling-review-card {
        background: linear-gradient(135deg, #667eea 0%, #764ba2 100%);
        color: white;
        padding: 1.5rem;
        border-radius: 10px;
        margin: 1rem 0;
    }
    .validation-unified-card {
        background: linear-gradient(135deg, #667eea 0%, #764ba2 100%);
        color: white;
        padding: 1.5rem;
        border-radius: 10px;
        margin: 1rem 0;
    }
</style>
""", unsafe_allow_html=True)
