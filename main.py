import streamlit as st
import io
import google.generativeai as genai
from PIL import Image
import requests
import datetime
import os
from pymongo import MongoClient
from bson import ObjectId
import json
import hashlib

# Configura√ß√£o inicial
st.set_page_config(
    layout="wide",
    page_title="Agente Generativo",
    page_icon="ü§ñ"
)

# --- Sistema de Autentica√ß√£o ---
def make_hashes(password):
    return hashlib.sha256(str.encode(password)).hexdigest()

def check_hashes(password, hashed_text):
    return make_hashes(password) == hashed_text

# Dados de usu√°rio (em produ√ß√£o, isso deve vir de um banco de dados seguro)
users = {
    "admin": make_hashes("senha1234"),  # admin/senha1234
    "user1": make_hashes("password1"),  # user1/password1
    "user2": make_hashes("password2")   # user2/password2
}

def login():
    """Formul√°rio de login"""
    st.title("üîí Agente Generativo - Login")
    
    with st.form("login_form"):
        username = st.text_input("Usu√°rio")
        password = st.text_input("Senha", type="password")
        submit_button = st.form_submit_button("Login")
        
        if submit_button:
            if username in users and check_hashes(password, users[username]):
                st.session_state.logged_in = True
                st.session_state.user = username
                st.success("Login realizado com sucesso!")
                st.rerun()
            else:
                st.error("Usu√°rio ou senha incorretos")

# Verificar se o usu√°rio est√° logado
if "logged_in" not in st.session_state:
    st.session_state.logged_in = False

if not st.session_state.logged_in:
    login()
    st.stop()

# --- CONEX√ÉO MONGODB (ap√≥s login) ---
client = MongoClient("mongodb+srv://gustavoromao3345:RqWFPNOJQfInAW1N@cluster0.5iilj.mongodb.net/auto_doc?retryWrites=true&w=majority&ssl=true&ssl_cert_reqs=CERT_NONE&tlsAllowInvalidCertificates=true")
db = client['agentes_personalizados']
collection_agentes = db['agentes']
collection_conversas = db['conversas']

# Configura√ß√£o da API do Gemini
gemini_api_key = os.getenv("GEM_API_KEY")
if not gemini_api_key:
    st.error("GEMINI_API_KEY n√£o encontrada nas vari√°veis de ambiente")
    st.stop()

genai.configure(api_key=gemini_api_key)
modelo_vision = genai.GenerativeModel("gemini-2.5-flash", generation_config={"temperature": 0.1})
modelo_texto = genai.GenerativeModel("gemini-2.5-flash")

# --- Configura√ß√£o de Autentica√ß√£o de Administrador ---
def check_admin_password():
    """Retorna True se o usu√°rio fornecer a senha de admin correta."""
    
    def admin_password_entered():
        """Verifica se a senha de admin est√° correta."""
        if st.session_state["admin_password"] == "senha123":
            st.session_state["admin_password_correct"] = True
            st.session_state["admin_user"] = "admin"
            del st.session_state["admin_password"]
        else:
            st.session_state["admin_password_correct"] = False

    if "admin_password_correct" not in st.session_state:
        # Mostra o input para senha de admin
        st.text_input(
            "Senha de Administrador", 
            type="password", 
            on_change=admin_password_entered, 
            key="admin_password"
        )
        return False
    elif not st.session_state["admin_password_correct"]:
        # Senha incorreta, mostra input + erro
        st.text_input(
            "Senha de Administrador", 
            type="password", 
            on_change=admin_password_entered, 
            key="admin_password"
        )
        st.error("üòï Senha de administrador incorreta")
        return False
    else:
        # Senha correta
        return True

# --- Fun√ß√µes CRUD para Agentes ---
def criar_agente(nome, system_prompt, base_conhecimento, comments):
    """Cria um novo agente no MongoDB"""
    agente = {
        "nome": nome,
        "system_prompt": system_prompt,
        "base_conhecimento": base_conhecimento,
        "comments": comments,
        "data_criacao": datetime.datetime.now(),
        "ativo": True
    }
    result = collection_agentes.insert_one(agente)
    return result.inserted_id

def listar_agentes():
    """Retorna todos os agentes ativos"""
    return list(collection_agentes.find({"ativo": True}).sort("data_criacao", -1))

def obter_agente(agente_id):
    """Obt√©m um agente espec√≠fico pelo ID"""
    if isinstance(agente_id, str):
        agente_id = ObjectId(agente_id)
    return collection_agentes.find_one({"_id": agente_id})

def atualizar_agente(agente_id, nome, system_prompt, base_conhecimento, comments):
    """Atualiza um agente existente"""
    if isinstance(agente_id, str):
        agente_id = ObjectId(agente_id)
    return collection_agentes.update_one(
        {"_id": agente_id},
        {
            "$set": {
                "nome": nome,
                "system_prompt": system_prompt,
                "base_conhecimento": base_conhecimento,
                "comments": comments,
                "data_atualizacao": datetime.datetime.now()
            }
        }
    )

def desativar_agente(agente_id):
    """Desativa um agente (soft delete)"""
    if isinstance(agente_id, str):
        agente_id = ObjectId(agente_id)
    return collection_agentes.update_one(
        {"_id": agente_id},
        {"$set": {"ativo": False, "data_desativacao": datetime.datetime.now()}}
    )

def salvar_conversa(agente_id, mensagens):
    """Salva uma conversa no hist√≥rico"""
    if isinstance(agente_id, str):
        agente_id = ObjectId(agente_id)
    conversa = {
        "agente_id": agente_id,
        "mensagens": mensagens,
        "data_criacao": datetime.datetime.now()
    }
    return collection_conversas.insert_one(conversa)

def obter_conversas(agente_id, limite=10):
    """Obt√©m o hist√≥rico de conversas de um agente"""
    if isinstance(agente_id, str):
        agente_id = ObjectId(agente_id)
    return list(collection_conversas.find(
        {"agente_id": agente_id}
    ).sort("data_criacao", -1).limit(limite))

# --- Interface Principal ---
st.sidebar.title(f"ü§ñ Bem-vindo, {st.session_state.user}!")

# Bot√£o de logout na sidebar
if st.sidebar.button("üö™ Sair"):
    for key in ["logged_in", "user", "admin_password_correct", "admin_user"]:
        if key in st.session_state:
            del st.session_state[key]
    st.rerun()

st.title("ü§ñ Agente Generativo Personaliz√°vel")

# Inicializar estado da sess√£o
if "agente_selecionado" not in st.session_state:
    st.session_state.agente_selecionado = None
if "messages" not in st.session_state:
    st.session_state.messages = []



genai.configure(api_key=gemini_api_key)
modelo_vision = genai.GenerativeModel("gemini-2.5-flash", generation_config={"temperature": 0.1})
modelo_texto = genai.GenerativeModel("gemini-2.5-flash")

# --- Configura√ß√£o de Autentica√ß√£o de Administrador ---
def check_admin_password():
    """Retorna True se o usu√°rio fornecer a senha de admin correta."""
    
    def admin_password_entered():
        """Verifica se a senha de admin est√° correta."""
        if st.session_state["admin_password"] == "senha123":
            st.session_state["admin_password_correct"] = True
            st.session_state["admin_user"] = "admin"
            del st.session_state["admin_password"]
        else:
            st.session_state["admin_password_correct"] = False

    if "admin_password_correct" not in st.session_state:
        # Mostra o input para senha de admin
        st.text_input(
            "Senha de Administrador", 
            type="password", 
            on_change=admin_password_entered, 
            key="admin_password"
        )
        return False
    elif not st.session_state["admin_password_correct"]:
        # Senha incorreta, mostra input + erro
        st.text_input(
            "Senha de Administrador", 
            type="password", 
            on_change=admin_password_entered, 
            key="admin_password"
        )
        st.error("üòï Senha de administrador incorreta")
        return False
    else:
        # Senha correta
        return True

# --- Fun√ß√µes CRUD para Agentes ---
def criar_agente(nome, system_prompt, base_conhecimento, comments):
    """Cria um novo agente no MongoDB"""
    agente = {
        "nome": nome,
        "system_prompt": system_prompt,
        "base_conhecimento": base_conhecimento,
        "comments": comments,
        "data_criacao": datetime.datetime.now(),
        "ativo": True
    }
    result = collection_agente.insert_one(agente)
    return result.inserted_id

def listar_agentes():
    """Retorna todos os agentes ativos"""
    return list(collection_agente.find({"ativo": True}).sort("data_criacao", -1))

def obter_agente(agente_id):
    """Obt√©m um agente espec√≠fico pelo ID"""
    if isinstance(agente_id, str):
        agente_id = ObjectId(agente_id)
    return collection_agente.find_one({"_id": agente_id})

def atualizar_agente(agente_id, nome, system_prompt, base_conhecimento, comments):
    """Atualiza um agente existente"""
    if isinstance(agente_id, str):
        agente_id = ObjectId(agente_id)
    return collection_agente.update_one(
        {"_id": agente_id},
        {
            "$set": {
                "nome": nome,
                "system_prompt": system_prompt,
                "base_conhecimento": base_conhecimento,
                "comments": comments,
                "data_atualizacao": datetime.datetime.now()
            }
        }
    )

def desativar_agente(agente_id):
    """Desativa um agente (soft delete)"""
    if isinstance(agente_id, str):
        agente_id = ObjectId(agente_id)
    return collection_agente.update_one(
        {"_id": agente_id},
        {"$set": {"ativo": False, "data_desativacao": datetime.datetime.now()}}
    )

def salvar_conversa(agente_id, mensagens, segmentos_utilizados):
    """Salva uma conversa no hist√≥rico"""
    if isinstance(agente_id, str):
        agente_id = ObjectId(agente_id)
    conversa = {
        "agente_id": agente_id,
        "mensagens": mensagens,
        "segmentos_utilizados": segmentos_utilizados,
        "data_criacao": datetime.datetime.now()
    }
    return collection_conversas.insert_one(conversa)

def obter_conversas(agente_id, limite=10):
    """Obt√©m o hist√≥rico de conversas de um agente"""
    if isinstance(agente_id, str):
        agente_id = ObjectId(agente_id)
    return list(collection_conversas.find(
        {"agente_id": agente_id}
    ).sort("data_criacao", -1).limit(limite))

# --- Fun√ß√£o para construir contexto com segmentos selecionados ---
def construir_contexto(agente, segmentos_selecionados, historico_mensagens=None):
    """Constr√≥i o contexto com base nos segmentos selecionados"""
    contexto = ""
    
    if "system_prompt" in segmentos_selecionados and agente.get('system_prompt'):
        contexto += f"### INSTRU√á√ïES DO SISTEMA ###\n{agente['system_prompt']}\n\n"
    
    if "base_conhecimento" in segmentos_selecionados and agente.get('base_conhecimento'):
        contexto += f"### BASE DE CONHECIMENTO ###\n{agente['base_conhecimento']}\n\n"
    
    if "comments" in segmentos_selecionados and agente.get('comments'):
        contexto += f"### COMENT√ÅRIOS DO CLIENTE ###\n{agente['comments']}\n\n"
    
    # Adicionar hist√≥rico se fornecido
    if historico_mensagens:
        contexto += "### HIST√ìRICO DA CONVERSA ###\n"
        for msg in historico_mensagens:
            contexto += f"{msg['role']}: {msg['content']}\n"
        contexto += "\n"
    
    contexto += "### RESPOSTA ATUAL ###\nassistant:"
    
    return contexto

# --- Fun√ß√µes para processamento de v√≠deo ---
def processar_video_upload(video_file, segmentos_selecionados, agente, tipo_analise="completa"):
    """Processa v√≠deo upload e retorna an√°lise"""
    try:
        # Ler bytes do v√≠deo
        video_bytes = video_file.read()
        
        # Construir contexto com segmentos selecionados
        contexto = construir_contexto(agente, segmentos_selecionados)
        
        # Definir prompt baseado no tipo de an√°lise
        if tipo_analise == "completa":
            prompt = f"""
            {contexto}
            
            Analise este v√≠deo considerando as diretrizes fornecidas e forne√ßa um relat√≥rio detalhado:
            
            ## üé¨ AN√ÅLISE DO V√çDEO
            
            ### üìä Resumo Executivo
            [Forne√ßa uma vis√£o geral da conformidade do v√≠deo com as diretrizes]
            
            ### ‚úÖ Pontos de Conformidade
            - [Liste os aspectos que est√£o em conformidade]
            
            ### ‚ö†Ô∏è Pontos de Aten√ß√£o
            - [Liste os aspectos que precisam de ajustes]
            
            ### üéØ An√°lise de Conte√∫do
            - **Mensagem**: [Avalie se a mensagem est√° alinhada]
            - **Tom e Linguagem**: [Avalie o tom utilizado]
            - **Valores da Marca**: [Verifique alinhamento com valores]
            
            ### üé® An√°lise Visual
            - **Identidade Visual**: [Cores, logos, tipografia]
            - **Qualidade T√©cnica**: [Ilumina√ß√£o, enquadramento, √°udio]
            - **Consist√™ncia**: [Manuten√ß√£o da identidade ao longo do v√≠deo]
            
            ### üîä An√°lise de √Åudio
            - [Qualidade, trilha sonora, voz]
            
            ### üìã Recomenda√ß√µes Espec√≠ficas
            [Liste recomenda√ß√µes pr√°ticas para melhorias]
            
            ### üèÜ Avalia√ß√£o Final
            [Aprovado/Reprovado/Com ajustes] - [Justificativa]
            """
        elif tipo_analise == "rapida":
            prompt = f"""
            {contexto}
            
            Fa√ßa uma an√°lise r√°pida deste v√≠deo focando nos aspectos mais cr√≠ticos:
            
            ### üîç An√°lise R√°pida
            - **Conformidade Geral**: [Avalia√ß√£o geral]
            - **Principais Pontos Positivos**: [2-3 pontos]
            - **Principais Problemas**: [2-3 pontos cr√≠ticos]
            - **Recomenda√ß√£o Imediata**: [Aprovar/Reprovar/Ajustar]
            """
        else:  # an√°lise t√©cnica
            prompt = f"""
            {contexto}
            
            Fa√ßa uma an√°lise t√©cnica detalhada do v√≠deo:
            
            ### üõ†Ô∏è An√°lise T√©cnica
            - **Qualidade de V√≠deo**: [Resolu√ß√£o, estabilidade, compress√£o]
            - **Qualidade de √Åudio**: [Clareza, ru√≠do, mixagem]
            - **Edi√ß√£o e Transi√ß√µes**: [Fluidez, ritmo, cortes]
            - **Aspectos T√©cnicos Conformes**: 
            - **Problemas T√©cnicos Identificados**:
            - **Recomenda√ß√µes T√©cnicas**:
            """
        
        # Processar v√≠deo com a API Gemini
        response = modelo_vision.generate_content(
            contents=[
                types.Part(
                    inline_data=types.Blob(
                        data=video_bytes,
                        mime_type=video_file.type
                    )
                ),
                types.Part(text=prompt)
            ]
        )
        
        return response.text
        
    except Exception as e:
        return f"Erro ao processar v√≠deo: {str(e)}"

def processar_url_youtube(youtube_url, segmentos_selecionados, agente, tipo_analise="completa"):
    """Processa URL do YouTube e retorna an√°lise"""
    try:
        # Construir contexto com segmentos selecionados
        contexto = construir_contexto(agente, segmentos_selecionados)
        
        # Definir prompt baseado no tipo de an√°lise
        if tipo_analise == "completa":
            prompt = f"""
            {contexto}
            
            Analise este v√≠deo do YouTube considerando as diretrizes fornecidas:
            
            ## üé¨ AN√ÅLISE DO V√çDEO - YOUTUBE
            
            ### üìä Resumo Executivo
            [Avalia√ß√£o geral de conformidade]
            
            ### üéØ Conte√∫do e Mensagem
            - Alinhamento com diretrizes: 
            - Clareza da mensagem:
            - Tom e abordagem:
            
            ### üé® Aspectos Visuais
            - Identidade visual:
            - Qualidade de produ√ß√£o:
            - Consist√™ncia da marca:
            
            ### üîä Aspectos de √Åudio
            - Qualidade do √°udio:
            - Trilha sonora:
            - Narra√ß√£o/di√°logo:
            
            ### üìà Estrutura e Engajamento
            - Ritmo do v√≠deo:
            - Manuten√ß√£o do interesse:
            - Chamadas para a√ß√£o:
            
            ### ‚úÖ Pontos Fortes
            - [Liste os pontos positivos]
            
            ### ‚ö†Ô∏è Pontos de Melhoria
            - [Liste sugest√µes de melhoria]
            
            ### üèÜ Recomenda√ß√£o Final
            [Status e justificativa]
            """
        
        # Processar URL do YouTube
        response = modelo_vision.generate_content(
            contents=[
                types.Part(
                    file_data=types.FileData(file_uri=youtube_url)
                ),
                types.Part(text=prompt)
            ]
        )
        
        return response.text
        
    except Exception as e:
        return f"Erro ao processar URL do YouTube: {str(e)}"

# --- Interface Principal ---
st.sidebar.title(f"ü§ñ Bem-vindo, {st.session_state.user}!")

# Bot√£o de logout na sidebar
if st.sidebar.button("üö™ Sair"):
    for key in ["logged_in", "user", "admin_password_correct", "admin_user"]:
        if key in st.session_state:
            del st.session_state[key]
    st.rerun()

st.title("ü§ñ Agente Generativo Personaliz√°vel")

# Inicializar estado da sess√£o
if "agente_selecionado" not in st.session_state:
    st.session_state.agente_selecionado = None
if "messages" not in st.session_state:
    st.session_state.messages = []
if "segmentos_selecionados" not in st.session_state:
    st.session_state.segmentos_selecionados = ["system_prompt", "base_conhecimento", "comments"]

# Menu de abas - ADICIONANDO A NOVA ABA DE V√çDEO
tab_chat, tab_gerenciamento, tab_aprovacao, tab_video, tab_geracao, tab_resumo = st.tabs([
    "üí¨ Chat", 
    "‚öôÔ∏è Gerenciar Agentes", 
    "‚úÖ Valida√ß√£o", 
    "üé¨ Valida√ß√£o de V√≠deo",
    "‚ú® Gera√ß√£o de Conte√∫do",
    "üìù Resumo de Textos"
])

with tab_gerenciamento:
    st.header("Gerenciamento de Agentes")
    
    # Verificar autentica√ß√£o apenas para gerenciamento
    if st.session_state.user != "admin":
        st.warning("Acesso restrito a administradores")
    else:
        # Verificar senha de admin
        if not check_admin_password():
            st.warning("Digite a senha de administrador")
        else:
            # Mostra o bot√£o de logout admin
            if st.button("Logout Admin"):
                if "admin_password_correct" in st.session_state:
                    del st.session_state["admin_password_correct"]
                if "admin_user" in st.session_state:
                    del st.session_state["admin_user"]
                st.rerun()
            
            st.write(f'Bem-vindo administrador!')
            
            # Subabas para gerenciamento
            sub_tab1, sub_tab2, sub_tab3 = st.tabs(["Criar Agente", "Editar Agente", "Gerenciar Agentes"])
            
            with sub_tab1:
                st.subheader("Criar Novo Agente")
                
                with st.form("form_criar_agente"):
                    nome_agente = st.text_input("Nome do Agente:")
                    system_prompt = st.text_area("Prompt de Sistema:", height=150, 
                                                placeholder="Ex: Voc√™ √© um assistente especializado em...")
                    base_conhecimento = st.text_area("Brand Guidelines:", height=200,
                                                   placeholder="Cole aqui informa√ß√µes, diretrizes, dados...")
                    comments = st.text_area("Coment√°rios do cliente:", height=200,
                                                   placeholder="Cole aqui os coment√°rios de ajuste do cliente (Se houver)")
                    
                    submitted = st.form_submit_button("Criar Agente")
                    if submitted:
                        if nome_agente and system_prompt:
                            agente_id = criar_agente(nome_agente, system_prompt, base_conhecimento, comments)
                            st.success(f"Agente '{nome_agente}' criado com sucesso!")
                        else:
                            st.error("Nome e Prompt de Sistema s√£o obrigat√≥rios!")
            
            with sub_tab2:
                st.subheader("Editar Agente Existente")
                
                agentes = listar_agentes()
                if agentes:
                    agente_options = {agente['nome']: agente for agente in agentes}
                    agente_selecionado_nome = st.selectbox("Selecione o agente para editar:", 
                                                         list(agente_options.keys()))
                    
                    if agente_selecionado_nome:
                        agente = agente_options[agente_selecionado_nome]
                        
                        with st.form("form_editar_agente"):
                            novo_nome = st.text_input("Nome do Agente:", value=agente['nome'])
                            novo_prompt = st.text_area("Prompt de Sistema:", value=agente['system_prompt'], height=150)
                            nova_base = st.text_area("Brand Guidelines:", value=agente.get('base_conhecimento', ''), height=200)
                            nova_comment = st.text_area("Coment√°rios:", value=agente.get('comments', ''), height=200)
                            
                            submitted = st.form_submit_button("Atualizar Agente")
                            if submitted:
                                if novo_nome and novo_prompt:
                                    atualizar_agente(agente['_id'], novo_nome, novo_prompt, nova_base, nova_comment)
                                    st.success(f"Agente '{novo_nome}' atualizado com sucesso!")
                                    st.rerun()
                                else:
                                    st.error("Nome e Prompt de Sistema s√£o obrigat√≥rios!")
                else:
                    st.info("Nenhum agente criado ainda.")
            
            with sub_tab3:
                st.subheader("Gerenciar Agentes")
                
                agentes = listar_agentes()
                if agentes:
                    for agente in agentes:
                        with st.expander(f"{agente['nome']} - Criado em {agente['data_criacao'].strftime('%d/%m/%Y')}"):
                            st.write(f"**Prompt de Sistema:** {agente['system_prompt']}")
                            if agente.get('base_conhecimento'):
                                st.write(f"**Brand Guidelines:** {agente['base_conhecimento'][:200]}...")
                            if agente.get('comments'):
                                st.write(f"**Coment√°rios do cliente:** {agente['comments'][:200]}...")
                            
                            col1, col2 = st.columns(2)
                            with col1:
                                if st.button("Selecionar para Chat", key=f"select_{agente['_id']}"):
                                    st.session_state.agente_selecionado = agente
                                    st.session_state.messages = []
                                    st.success(f"Agente '{agente['nome']}' selecionado!")
                            with col2:
                                if st.button("Desativar", key=f"delete_{agente['_id']}"):
                                    desativar_agente(agente['_id'])
                                    st.success(f"Agente '{agente['nome']}' desativado!")
                                    st.rerun()
                else:
                    st.info("Nenhum agente criado ainda.")

with tab_chat:
    st.header("üí¨ Chat com Agente")
    
    # Sele√ß√£o de agente se n√£o houver um selecionado
    if not st.session_state.agente_selecionado:
        agentes = listar_agentes()
        if agentes:
            agente_options = {agente['nome']: agente for agente in agentes}
            agente_selecionado_nome = st.selectbox("Selecione um agente para conversar:", 
                                                 list(agente_options.keys()))
            
            if st.button("Iniciar Conversa"):
                st.session_state.agente_selecionado = agente_options[agente_selecionado_nome]
                st.session_state.messages = []
                st.rerun()
        else:
            st.info("Nenhum agente dispon√≠vel. Crie um agente primeiro na aba de Gerenciamento.")
    else:
        agente = st.session_state.agente_selecionado
        st.subheader(f"Conversando com: {agente['nome']}")
        
        # Bot√£o para trocar de agente
        if st.button("Trocar de Agente"):
            st.session_state.agente_selecionado = None
            st.session_state.messages = []
            st.rerun()
        
        # Exibir hist√≥rico de mensagens
        for message in st.session_state.messages:
            with st.chat_message(message["role"]):
                st.markdown(message["content"])
        
        # Input do usu√°rio
        if prompt := st.chat_input("Digite sua mensagem..."):
            # Adicionar mensagem do usu√°rio ao hist√≥rico
            st.session_state.messages.append({"role": "user", "content": prompt})
            with st.chat_message("user"):
                st.markdown(prompt)
            
            # Preparar contexto com prompt do sistema e Brand Guidelines
            contexto = f"""
            {agente['system_prompt']}
            
            Brand Guidelines:
            {agente.get('base_conhecimento', '')}

            Coment√°rios de ajuste de conte√∫do do cliente:
            {agente.get('comments', '')}
            
            Hist√≥rico da conversa:
            """
            
            # Adicionar hist√≥rico formatado
            for msg in st.session_state.messages:
                contexto += f"\n{msg['role']}: {msg['content']}"
            
            contexto += "\n\nassistant:"
            
            # Gerar resposta
            with st.chat_message("assistant"):
                with st.spinner('Pensando...'):
                    try:
                        resposta = modelo_texto.generate_content(contexto)
                        st.markdown(resposta.text)
                        
                        # Adicionar ao hist√≥rico
                        st.session_state.messages.append({"role": "assistant", "content": resposta.text})
                        
                        # Salvar conversa
                        salvar_conversa(agente['_id'], st.session_state.messages)
                        
                    except Exception as e:
                        st.error(f"Erro ao gerar resposta: {str(e)}")

with tab_video:
    st.header("üé¨ Valida√ß√£o de V√≠deos")
    
    if not st.session_state.agente_selecionado:
        st.info("Selecione um agente primeiro na aba de Chat")
    else:
        agente = st.session_state.agente_selecionado
        st.subheader(f"Valida√ß√£o com: {agente['nome']}")
        
        # Controles de segmentos para valida√ß√£o de v√≠deo
        st.sidebar.subheader("üîß Configura√ß√µes de Valida√ß√£o de V√≠deo")
        st.sidebar.write("Selecione bases para valida√ß√£o:")
        
        segmentos_video = st.sidebar.multiselect(
            "Bases para valida√ß√£o de v√≠deo:",
            options=["system_prompt", "base_conhecimento", "comments"],
            default=st.session_state.segmentos_selecionados,
            key="video_segmentos"
        )
        
        # Sele√ß√£o do tipo de entrada
        entrada_tipo = st.radio(
            "Escolha o tipo de entrada:",
            ["Upload de Arquivo", "URL do YouTube"],
            horizontal=True
        )
        
        # Configura√ß√µes de an√°lise
        col_config1, col_config2 = st.columns(2)
        
        with col_config1:
            tipo_analise = st.selectbox(
                "Tipo de An√°lise:",
                ["completa", "rapida", "tecnica"],
                format_func=lambda x: {
                    "completa": "üìä An√°lise Completa",
                    "rapida": "‚ö° An√°lise R√°pida", 
                    "tecnica": "üõ†Ô∏è An√°lise T√©cnica"
                }[x]
            )
        
        with col_config2:
            if tipo_analise == "completa":
                st.info("An√°lise detalhada de todos os aspectos")
            elif tipo_analise == "rapida":
                st.info("Foco nos pontos mais cr√≠ticos")
            else:
                st.info("An√°lise t√©cnica e de qualidade")
        
        if entrada_tipo == "Upload de Arquivo":
            st.subheader("üì§ Upload de V√≠deo")
            
            uploaded_video = st.file_uploader(
                "Carregue o v√≠deo para an√°lise",
                type=["mp4", "mpeg", "mov", "avi", "flv", "mpg", "webm", "wmv", "3gpp"],
                help="Formatos suportados: MP4, MPEG, MOV, AVI, FLV, MPG, WEBM, WMV, 3GPP"
            )
            
            if uploaded_video:
                # Exibir informa√ß√µes do v√≠deo
                st.info(f"üìπ Arquivo: {uploaded_video.name}")
                st.info(f"üìè Tamanho: {uploaded_video.size / (1024*1024):.2f} MB")
                
                # Exibir preview do v√≠deo
                st.video(uploaded_video)
                
                # Bot√£o de an√°lise
                if st.button("üé¨ Iniciar An√°lise do V√≠deo", type="primary"):
                    with st.spinner('Analisando v√≠deo... Isso pode levar alguns minutos'):
                        resultado = processar_video_upload(
                            uploaded_video, 
                            segmentos_video, 
                            agente, 
                            tipo_analise
                        )
                        
                        st.subheader("üìã Resultado da An√°lise")
                        st.markdown(resultado)
                        
                        # Op√ß√£o para download do relat√≥rio
                        st.download_button(
                            "üíæ Baixar Relat√≥rio",
                            data=resultado,
                            file_name=f"relatorio_video_{datetime.datetime.now().strftime('%Y%m%d_%H%M%S')}.txt",
                            mime="text/plain"
                        )
        
        else:  # URL do YouTube
            st.subheader("üîó URL do YouTube")
            
            youtube_url = st.text_input(
                "Cole a URL do v√≠deo do YouTube:",
                placeholder="https://www.youtube.com/watch?v=...",
                help="A URL deve ser p√∫blica (n√£o privada ou n√£o listada)"
            )
            
            if youtube_url:
                # Validar URL do YouTube
                if "youtube.com" in youtube_url or "youtu.be" in youtube_url:
                    st.success("‚úÖ URL do YouTube v√°lida detectada")
                    
                    # Bot√£o de an√°lise
                    if st.button("üé¨ Iniciar An√°lise do V√≠deo", type="primary"):
                        with st.spinner('Analisando v√≠deo do YouTube... Isso pode levar alguns minutos'):
                            resultado = processar_url_youtube(
                                youtube_url, 
                                segmentos_video, 
                                agente, 
                                tipo_analise
                            )
                            
                            st.subheader("üìã Resultado da An√°lise")
                            st.markdown(resultado)
                            
                            # Op√ß√£o para download do relat√≥rio
                            st.download_button(
                                "üíæ Baixar Relat√≥rio",
                                data=resultado,
                                file_name=f"relatorio_youtube_{datetime.datetime.now().strftime('%Y%m%d_%H%M%S')}.txt",
                                mime="text/plain"
                            )
                else:
                    st.error("‚ùå Por favor, insira uma URL v√°lida do YouTube")
        
        # Se√ß√£o de informa√ß√µes
        with st.expander("‚ÑπÔ∏è Informa√ß√µes sobre An√°lise de V√≠deos"):
            st.markdown("""
            ### üìπ Capacidades de An√°lise
            
            O agente pode analisar v√≠deos considerando:
            
            **üéØ Conte√∫do e Mensagem:**
            - Alinhamento com diretrizes da marca
            - Clareza da mensagem principal
            - Tom e linguagem apropriados
            - Valores e posicionamento
            
            **üé® Aspectos Visuais:**
            - Identidade visual (cores, logos, tipografia)
            - Qualidade de produ√ß√£o
            - Consist√™ncia da marca
            - Enquadramento e composi√ß√£o
            
            **üîä Aspectos de √Åudio:**
            - Qualidade do √°udio
            - Trilha sonora adequada
            - Narra√ß√£o/di√°logo claro
            - Mixagem e balanceamento
            
            **üìä Estrutura e Engajamento:**
            - Ritmo e dura√ß√£o apropriados
            - Manuten√ß√£o do interesse
            - Chamadas para a√ß√£o eficazes
            - Progress√£o l√≥gica
            
            ### ‚ö†Ô∏è Limita√ß√µes T√©cnicas
            
            - **Dura√ß√£o**: Recomendado at√© 2 horas para an√°lise completa
            - **Formato**: Formatos comuns de v√≠deo suportados
            - **Qualidade**: An√°lise em 1 frame por segundo padr√£o
            - **YouTube**: Apenas v√≠deos p√∫blicos
            """)

with tab_aprovacao:
    st.header("‚úÖ Valida√ß√£o de Conte√∫do")
    
    if not st.session_state.agente_selecionado:
        st.info("Selecione um agente primeiro na aba de Chat")
    else:
        agente = st.session_state.agente_selecionado
        st.subheader(f"Valida√ß√£o com: {agente['nome']}")
        
        subtab1, subtab2 = st.tabs(["üñºÔ∏è An√°lise de Imagens", "‚úçÔ∏è Revis√£o de Textos"])
        
        with subtab1:
            uploaded_image = st.file_uploader("Carregue imagem para an√°lise (.jpg, .png)", type=["jpg", "jpeg", "png"])
            if uploaded_image:
                st.image(uploaded_image, use_column_width=True, caption="Pr√©-visualiza√ß√£o")
                if st.button("Validar Imagem", key="analyze_img"):
                    with st.spinner('Analisando imagem...'):
                        try:
                            image = Image.open(uploaded_image)
                            img_bytes = io.BytesIO()
                            image.save(img_bytes, format=image.format)
                            
                            prompt_analise = f"""
                            {agente['system_prompt']}
                            
                            Brand Guidelines:
                            ###BEGIN Brand Guidelines###
                            {agente.get('base_conhecimento', '')}
                            ###END Brand Guidelines###

                            Coment√°rios de observa√ß√£o de conte√∫do do cliente:
                            ###BEGIN COMMENTS FROM CLIENT###
                            {agente.get('comments', '')}
                            ###END COMMENTS FROM CLIENT###
                            
                            Analise esta imagem e forne√ßa um parecer detalhado com:
                            - ‚úÖ Pontos positivos
                            - ‚ùå Pontos que precisam de ajuste
                            - üõ† Recomenda√ß√µes espec√≠ficas
                            - Avalia√ß√£o final (aprovado/reprovado/com observa√ß√µes)
                            """
                            
                            resposta = modelo_vision.generate_content([
                                prompt_analise,
                                {"mime_type": "image/jpeg", "data": img_bytes.getvalue()}
                            ])
                            st.subheader("Resultado da An√°lise")
                            st.markdown(resposta.text)
                        except Exception as e:
                            st.error(f"Falha na an√°lise: {str(e)}")

        with subtab2:
            texto_input = st.text_area("Insira o texto para valida√ß√£o:", height=200)
            if st.button("Validar Texto", key="validate_text"):
                with st.spinner('Analisando texto...'):
                    prompt_analise = f"""
                    {agente['system_prompt']}
                    
                            Brand Guidelines:
                            ###BEGIN Brand Guidelines###
                            {agente.get('base_conhecimento', '')}
                            ###END Brand Guidelines###

                            Coment√°rios de observa√ß√£o de conte√∫do do cliente:
                            ###BEGIN COMMENTS FROM CLIENT###
                            {agente.get('comments', '')}
                            ###END COMMENTS FROM CLIENT###
                    
                    Analise este texto e forne√ßa um parecer detalhado:
                    
                    Texto a ser analisado:
                    {texto_input}
                    
                    Formato da resposta:
                    ### An√°lise Geral
                    [resumo da an√°lise]
                    
                    ### Pontos Fortes
                    - [lista de pontos positivos]
                    
                    ### Pontos a Melhorar
                    - [lista de sugest√µes]
                    
                    ### Recomenda√ß√µes
                    - [a√ß√µes recomendadas]
                    
                    ### Vers√£o Ajustada (se necess√°rio)
                    [texto revisado]
                    """
                    
                    resposta = modelo_texto.generate_content(prompt_analise)
                    st.subheader("Resultado da An√°lise")
                    st.markdown(resposta.text)

with tab_geracao:
    st.header("‚ú® Gera√ß√£o de Conte√∫do")
    
    if not st.session_state.agente_selecionado:
        st.info("Selecione um agente primeiro na aba de Chat")
    else:
        agente = st.session_state.agente_selecionado
        st.subheader(f"Gera√ß√£o com: {agente['nome']}")
        
        campanha_brief = st.text_area("Briefing criativo:", help="Descreva objetivos, tom de voz e especifica√ß√µes", height=150)
        
        col1, col2 = st.columns(2)
        
        with col1:
            st.subheader("Diretrizes Visuais")
            if st.button("Gerar Especifica√ß√µes Visuais", key="gen_visual"):
                with st.spinner('Criando guia de estilo...'):
                    prompt = f"""
                    {agente['system_prompt']}
                    
                            Brand Guidelines:
                            ###BEGIN Brand Guidelines###
                            {agente.get('base_conhecimento', '')}
                            ###END Brand Guidelines###

                            Coment√°rios de observa√ß√£o de conte√∫do do cliente:
                            ###BEGIN COMMENTS FROM CLIENT###
                            {agente.get('comments', '')}
                            ###END COMMENTS FROM CLIENT###
                    
                    Com base no briefing: {campanha_brief}
                    
                    Crie um manual t√©cnico para designers incluindo:
                    1. üé® Paleta de cores (c√≥digos HEX/RGB)
                    2. üñºÔ∏è Diretrizes de fotografia/ilustra√ß√£o
                    3. ‚úèÔ∏è Tipografia hier√°rquica
                    4. üìê Grid e propor√ß√µes recomendadas
                    5. ‚ö†Ô∏è Restri√ß√µes de uso
                    6. üñåÔ∏è Descri√ß√£o da imagem principal sugerida
                    7. üì± Adapta√ß√µes para diferentes formatos
                    """
                    resposta = modelo_texto.generate_content(prompt)
                    st.markdown(resposta.text)

        with col2:
            st.subheader("Copywriting")
            if st.button("Gerar Textos", key="gen_copy"):
                with st.spinner('Desenvolvendo conte√∫do textual...'):
                    prompt = f"""
                    {agente['system_prompt']}
                    
                            Brand Guidelines:
                            ###BEGIN Brand Guidelines###
                            {agente.get('base_conhecimento', '')}
                            ###END Brand Guidelines###

                            Coment√°rios de observa√ß√£o de conte√∫do do cliente:
                            ###BEGIN COMMENTS FROM CLIENT###
                            {agente.get('comments', '')}
                            ###END COMMENTS FROM CLIENT###
                    
                    Com base no briefing: {campanha_brief}
                    
                    Crie textos para campanha incluindo:
                    - üìù Legenda principal (com emojis e quebras de linha)
                    - üè∑Ô∏è 10 hashtags relevantes
                    - üîó Sugest√£o de link (se aplic√°vel)
                    - üì¢ CTA adequado ao objetivo
                    - üéØ 3 op√ß√µes de headline
                    - üìÑ Corpo de texto (200 caracteres)
                    """
                    resposta = modelo_texto.generate_content(prompt)
                    st.markdown(resposta.text)

with tab_resumo:
    st.header("üìù Resumo de Textos")
    
    if not st.session_state.agente_selecionado:
        st.info("Selecione um agente primeiro na aba de Chat")
    else:
        agente = st.session_state.agente_selecionado
        st.subheader(f"Resumo com: {agente['nome']}")
        
        col_original, col_resumo = st.columns(2)
        
        with col_original:
            st.subheader("Texto Original")
            texto_original = st.text_area(
                "Cole o texto que deseja resumir:",
                height=400,
                placeholder="Insira aqui o texto completo..."
            )
            
            with st.expander("‚öôÔ∏è Configura√ß√µes do Resumo"):
                nivel_resumo = st.select_slider(
                    "N√≠vel de Resumo:",
                    options=["Extenso", "Moderado", "Conciso"],
                    value="Moderado"
                )
                
                incluir_pontos = st.checkbox(
                    "Incluir pontos-chave em t√≥picos",
                    value=True
                )
                
                manter_terminologia = st.checkbox(
                    "Manter terminologia t√©cnica",
                    value=True
                )
        
        with col_resumo:
            st.subheader("Resumo Gerado")
            
            if st.button("Gerar Resumo", key="gerar_resumo"):
                if not texto_original.strip():
                    st.warning("Por favor, insira um texto para resumir")
                else:
                    with st.spinner("Processando resumo..."):
                        try:
                            config_resumo = {
                                "Extenso": "um resumo detalhado mantendo cerca de 50% do conte√∫do original",
                                "Moderado": "um resumo conciso mantendo cerca de 30% do conte√∫do original",
                                "Conciso": "um resumo muito breve com apenas os pontos essenciais (cerca de 10-15%)"
                            }[nivel_resumo]
                            
                            prompt = f"""
                            {agente['system_prompt']}
                            
                            Brand Guidelines:
                            {agente.get('base_conhecimento', '')}
                            
                            Crie um resumo deste texto com as seguintes caracter√≠sticas:
                            - {config_resumo}
                            - {"Inclua os principais pontos em t√≥picos" if incluir_pontos else "Formato de texto cont√≠nuo"}
                            - {"Mantenha a terminologia t√©cnica espec√≠fica" if manter_terminologia else "Simplifique a linguagem"}
                            
                            Texto para resumir:
                            {texto_original}
                            
                            Estrutura do resumo:
                            1. T√≠tulo do resumo
                            2. {"Principais pontos em t√≥picos" if incluir_pontos else "Resumo textual"}
                            3. Conclus√£o/Recomenda√ß√µes
                            """
                            
                            resposta = modelo_texto.generate_content(prompt)
                            st.markdown(resposta.text)
                            
                            st.download_button(
                                "üìã Copiar Resumo",
                                data=resposta.text,
                                file_name="resumo_gerado.txt",
                                mime="text/plain"
                            )
                            
                        except Exception as e:
                            st.error(f"Erro ao gerar resumo: {str(e)}")

# --- Estiliza√ß√£o ---
st.markdown("""
<style>
    .stChatMessage {
        padding: 1rem;
        border-radius: 0.5rem;
        margin-bottom: 1rem;
    }
    [data-testid="stChatMessageContent"] {
        font-size: 1rem;
    }
    .stChatInput {
        bottom: 20px;
        position: fixed;
        width: calc(100% - 5rem);
    }
    div[data-testid="stTabs"] {
        margin-top: -30px;
    }
    div[data-testid="stVerticalBlock"] > div:has(>.stTextArea) {
        border-left: 3px solid #4CAF50;
        padding-left: 1rem;
    }
</style>
""", unsafe_allow_html=True)

# --- Estiliza√ß√£o ---
st.markdown("""
<style>
    .stChatMessage {
        padding: 1rem;
        border-radius: 0.5rem;
        margin-bottom: 1rem;
    }
    [data-testid="stChatMessageContent"] {
        font-size: 1rem;
    }
    .stChatInput {
        bottom: 20px;
        position: fixed;
        width: calc(100% - 5rem);
    }
    div[data-testid="stTabs"] {
        margin-top: -30px;
    }
    div[data-testid="stVerticalBlock"] > div:has(>.stTextArea) {
        border-left: 3px solid #4CAF50;
        padding-left: 1rem;
    }
    .segment-indicator {
        background-color: #f0f2f6;
        padding: 0.5rem;
        border-radius: 0.5rem;
        margin: 0.5rem 0;
        border-left: 4px solid #4CAF50;
    }
    .video-analysis-card {
        background: linear-gradient(135deg, #667eea 0%, #764ba2 100%);
        color: white;
        padding: 1.5rem;
        border-radius: 10px;
        margin: 1rem 0;
    }
</style>
""", unsafe_allow_html=True)
